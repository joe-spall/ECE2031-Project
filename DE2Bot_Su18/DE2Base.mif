-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 28A7;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 0A3C;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 10AA;  -- 	STORE  DVel        ; Reset API variables
           009 : 10A9;  -- 	STORE  DTheta
           00A : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           00B : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           00C : 8210;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00D : 81F2;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00E : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00F : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           010 : 4A4B;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           011 : 3817;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           012 : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           013 : 4A48;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           014 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           015 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           016 : 280F;  -- 	JUMP   WaitForSafety
           017 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           018 : 4A48;  -- 	AND    Mask1
           019 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           01A : 1226;  -- 	STORE  Temp        ; (overkill, but looks nice)
           01B : 6001;  -- 	SHIFT  1
           01C : 5226;  -- 	OR     Temp
           01D : 9807;  -- 	OUT    XLEDS
           01E : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           01F : 4A49;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           020 : 3817;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           021 : 0A3C;  -- 	LOAD   Zero
           022 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           023 : 98C3;  -- 	OUT    RESETPOS    ; reset odometer in case wheels moved after programming
           024 : B800;  -- 	LOADI  0
           025 : 10AA;  -- 	STORE  DVel        ; zero desired forward velocity
           026 : 10A9;  -- 	STORE  DTheta      ; desired heading = 0 degrees
           027 : B80A;  -- 	LOADI  10          ; period = (10 ms * 10) = 0.1s, or 10Hz.
           028 : 980C;  -- 	OUT    CTIMER      ; turn on timer peripheral
           029 : A802;  -- 	SEI    &B0010      ; enable interrupts from source 2 (timer)
           02A : B800;  -- 	LOADI  	0
           02B : 10AA;  -- 	STORE  	DVel        ; turn in-place (zero velocity)
           02C : 10A9;  -- 	STORE	DTheta
           02D : 8036;  -- 	CALL 	orientAInit	
           02E : 0A2D;  -- 	LOAD	orientASuccess
           02F : 3034;  -- 	JNEG	End
           030 : 402D;  -- 	JZERO	StartA
           031 : 8054;  -- 	CALL	orientBInit
           032 : 0A2E;  -- 	LOAD 	orientBSuccess
           033 : 4050;  -- 	JZERO	orientAShortMove
           034 : 8095;  -- 	CALL	orientCCleanUp
           035 : 289E;  -- 	JUMP	Die
           036 : 0A49;  -- 	LOAD 	Mask2			; LEDS to show in the orient A state
           037 : 9801;  -- 	OUT		LEDS
           038 : 0A4C;  -- 	LOAD   	Mask5       	; defined below as 0b0100
           039 : 98B2;  -- 	OUT    	SONAREN     	; enable sonar 5
           03A : 90AD;  -- 	IN		DIST5			; read sonar 5 distance
           03B : 9804;  -- 	OUT		SSEG1			; Debug
           03C : 1227;  -- 	STORE 	currDist5		; storing current distance
           03D : 81EC;  -- 	CALL	Wait1			; Debug?
           03E : 0A27;  -- 	LOAD 	currDist5
           03F : 2229;  -- 	SUB		maxDist5		
           040 : 3847;  -- 	JPOS	orientAMove		; above max, move
           041 : 0A27;  -- 	LOAD	currDist5		
           042 : 222A;  -- 	SUB		minDist5
           043 : 3047;  -- 	JNEG	orientAMove 	; below min, move
           044 : B801;  -- 	LOADI	1
           045 : 122D;  -- 	STORE	orientASuccess
           046 : 8800;  -- 	RETURN					; if aligned, stop part A
           047 : 08A9;  -- 	LOAD 	DTheta
           048 : 1A2B;  -- 	ADD 	orientADelt		; load amount of move per step
           049 : 10A9;  -- 	STORE  	DTheta      	; desired heading
           04A : 9805;  -- 	OUT		SSEG2			; Debug shows rotation 
           04B : 6E98;  -- 	ADDI   	-360			; check if you already rotated 360
           04C : 303A;  -- 	JNEG 	orientARun
           04D : BFFF;  -- 	LOADI 	-1				; Gone through 360 deg
           04E : 122D;  -- 	STORE	orientASuccess
           04F : 8800;  -- 	RETURN					; if gone through 360deg, just stop part A
           050 : 08A9;  -- 	LOAD	DTheta
           051 : 1A2C;  -- 	ADD		orientADelt2
           052 : 10A9;  -- 	STORE	DTheta
           053 : 282D;  -- 	JUMP	StartA
           054 : 0A4C;  -- 	LOAD   	Mask5       	; defined below as 0b0100
           055 : 98B2;  -- 	OUT    	SONAREN     	; enable sonar 5
           056 : B800;  -- 	LOADI	0
           057 : 122E;  -- 	STORE	orientBSuccess	; Resets success of orient b move
           058 : 2870;  -- 	JUMP	orientBMove1
           059 : 0A2F;  -- 	LOAD	orientBStep
           05A : 4070;  -- 	JZERO	orientBMove1	; Rotates one direction if on step 1
           05B : 6FFF;  -- 	ADDI	-1
           05C : 407E;  -- 	JZERO	orientBMove2	; Rotates other direction if on step 2
           05D : 289E;  -- 	JUMP	Die				; for some reason didn't leave, so just stop
           05E : 90AD;  -- 	IN		DIST5			; read sonar 5 distance
           05F : 9804;  -- 	OUT		SSEG1			; Debug
           060 : 1227;  -- 	STORE 	currDist5		; storing current distance
           061 : 2229;  -- 	SUB		maxDist5		
           062 : 3878;  -- 	JPOS	orientBMoveReset1 ; above max, reset
           063 : 0A27;  -- 	LOAD	currDist5		; TODO SO LED WHEN IN CERTAIN CALL
           064 : 222A;  -- 	SUB		minDist5
           065 : 3078;  -- 	JNEG	orientBMoveReset1 ; below min, reset
           066 : 287E;  -- 	JUMP	orientBMove2
           067 : 90AD;  -- 	IN		DIST5			; read sonar 5 distance
           068 : 9804;  -- 	OUT		SSEG1			; Debug
           069 : 1227;  -- 	STORE 	currDist5		; storing current distance
           06A : 2229;  -- 	SUB		maxDist5		
           06B : 3887;  -- 	JPOS	orientBMoveReset2 ; above max, reset 
           06C : 0A27;  -- 	LOAD	currDist5		; TODO SO LED WHEN IN CERTAIN CALL
           06D : 222A;  -- 	SUB		minDist5
           06E : 3087;  -- 	JNEG	orientBMoveReset2 ; below min, reset
           06F : 288D;  -- 	JUMP	orientBMoveSuccess ; Should be successfully orientated so correct orientation and leave
           070 : 0A4C;  -- 	LOAD	Mask5			; LEDS to show in the orient B state
           071 : 9801;  -- 	OUT		LEDS
           072 : 08A9;  -- 	LOAD 	DTheta
           073 : 1A30;  -- 	ADD 	orientBDelt		; move before first check to see if any difference
           074 : 10A9;  -- 	STORE  	DTheta      	; desired heading
           075 : 81EC;  -- 	CALL	Wait1
           076 : 81EC;  -- 	CALL	Wait1
           077 : 285E;  -- 	JUMP	orientBRun1
           078 : 08A9;  -- 	LOAD 	DTheta
           079 : 2230;  -- 	SUB 	orientBDelt		; recenter to start orientation
           07A : 10A9;  -- 	STORE  	DTheta      	; desired heading
           07B : B800;  -- 	LOADI	0
           07C : 122E;  -- 	STORE	orientBSuccess	; Was not successful, so exit
           07D : 8800;  -- 	RETURN
           07E : 0A4E;  -- 	LOAD	Mask7			; LEDS to show in the orient B state
           07F : 9801;  -- 	OUT		LEDS
           080 : 08A9;  -- 	LOAD 	DTheta
           081 : 2230;  -- 	SUB 	orientBDelt		; call twice to make up for initial move
           082 : 2230;  -- 	SUB		orientBDelt		; 
           083 : 10A9;  -- 	STORE  	DTheta      	; desired heading
           084 : 81EC;  -- 	CALL	Wait1
           085 : 81EC;  -- 	CALL	Wait1
           086 : 2867;  -- 	JUMP	orientBRun2
           087 : 08A9;  -- 	LOAD 	DTheta
           088 : 1A30;  -- 	ADD 	orientBDelt		; recenter to start orinetation
           089 : 10A9;  -- 	STORE  	DTheta      	; desired heading
           08A : B800;  -- 	LOADI	0
           08B : 122E;  -- 	STORE	orientBSuccess	; Was not successful, so exit
           08C : 8800;  -- 	RETURN
           08D : 08A9;  -- 	LOAD 	DTheta
           08E : 1A30;  -- 	ADD 	orientBDelt		; recenter to start orinetation
           08F : 10A9;  -- 	STORE  	DTheta      	; desired heading
           090 : 81EC;  -- 	CALL	Wait1
           091 : 81EC;  -- 	CALL	Wait1
           092 : B801;  -- 	LOADI	1
           093 : 122E;  -- 	STORE	orientBSuccess	; Was successful, so exit
           094 : 8800;  -- 	RETURN
           095 : 0A4B;  -- 	LOAD	Mask4			; LEDS to show in the orient C state
           096 : 9807;  -- 	OUT		XLEDS
           097 : 98C3;  -- 	OUT		RESETPOS		; Zeros odometry 
           098 : BFA4;  -- 	LOADI	-92				; Rotates -90 deg on completion 
           099 : 10A9;  -- 	STORE	DTheta
           09A : 980A;  -- 	OUT		BEEP			; Beeps for 1 second to notifiy completion
           09B : 81EC;  -- 	CALL	Wait1
           09C : 980A;  -- 	OUT		BEEP
           09D : 8800;  -- 	RETURN
           09E : A00F;  -- 	CLI    &B1111      ; disable all interrupts
           09F : 0A3C;  -- 	LOAD   Zero        ; Stop everything.
           0A0 : 9883;  -- 	OUT    LVELCMD
           0A1 : 988B;  -- 	OUT    RVELCMD
           0A2 : 98B2;  -- 	OUT    SONAREN
           0A3 : 08A6;  -- 	LOAD   DEAD        ; An indication that we are dead
           0A4 : 9805;  -- 	OUT    SSEG2       ; "dEAd" on the sseg
           0A5 : 28A5;  -- 	JUMP   Forever     ; Do this forever.
           0A6 : DEAD;  -- 	DEAD:  DW &HDEAD   ; Example of a "local" variable
           0A7 : 80AB;  -- 	CALL   ControlMovement
           0A8 : B000;  -- 	RETI   ; return from ISR
           0A9 : 0000;  -- DTheta:    		DW 0
           0AA : 0000;  -- DVel:      		DW 0
           0AB : B832;  -- 	LOADI  50          ; used for the CapValue subroutine
           0AC : 10EB;  -- 	STORE  MaxVal
           0AD : 80D8;  -- 	CALL   GetThetaErr ; get the heading error
           0AE : 6002;  -- 	SHIFT  2
           0AF : 10D5;  -- 	STORE  CMAErr      ; hold temporarily
           0B0 : 6002;  -- 	SHIFT  2           ; multiply by another 4
           0B1 : 80DF;  -- 	CALL   CapValue    ; get a +/- max of 50
           0B2 : 18D5;  -- 	ADD    CMAErr
           0B3 : 10D5;  -- 	STORE  CMAErr      ; now contains a desired differential
           0B4 : B9FE;  -- 	LOADI  510
           0B5 : 10EB;  -- 	STORE  MaxVal
           0B6 : 08AA;  -- 	LOAD   DVel
           0B7 : 80DF;  -- 	CALL   CapValue    ; ensure velocity is valid
           0B8 : 10AA;  -- 	STORE  DVel        ; overwrite any invalid input
           0B9 : 18D5;  -- 	ADD    CMAErr
           0BA : 80DF;  -- 	CALL   CapValue    ; ensure velocity is valid
           0BB : 10D7;  -- 	STORE  CMAR
           0BC : 08D5;  -- 	LOAD   CMAErr
           0BD : 80F3;  -- 	CALL   Neg         ; left wheel gets negative differential
           0BE : 18AA;  -- 	ADD    DVel
           0BF : 80DF;  -- 	CALL   CapValue
           0C0 : 10D6;  -- 	STORE  CMAL
           0C1 : 08D5;  -- 	LOAD   CMAErr
           0C2 : 6001;  -- 	SHIFT  1           ; double the differential
           0C3 : 10D5;  -- 	STORE  CMAErr
           0C4 : 08D7;  -- 	LOAD   CMAR
           0C5 : 20D6;  -- 	SUB    CMAL        ; calculate the actual differential
           0C6 : 20D5;  -- 	SUB    CMAErr      ; should be 0 if nothing got capped
           0C7 : 40D0;  -- 	JZERO  CMADone
           0C8 : 10D5;  -- 	STORE  CMAErr      ; the missing part
           0C9 : 18D6;  -- 	ADD    CMAL
           0CA : 80DF;  -- 	CALL   CapValue
           0CB : 10D6;  -- 	STORE  CMAL
           0CC : 08D7;  -- 	LOAD   CMAR
           0CD : 20D5;  -- 	SUB    CMAErr
           0CE : 80DF;  -- 	CALL   CapValue
           0CF : 10D7;  -- 	STORE  CMAR
           0D0 : 08D6;  -- 	LOAD   CMAL
           0D1 : 9883;  -- 	OUT    LVELCMD
           0D2 : 08D7;  -- 	LOAD   CMAR
           0D3 : 988B;  -- 	OUT    RVELCMD
           0D4 : 8800;  -- 	RETURN
           0D5 : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           0D6 : 0000;  -- 	CMAL:    DW 0      ; holds temp left velocity
           0D7 : 0000;  -- 	CMAR:    DW 0      ; holds temp right velocity
           0D8 : 90C2;  -- 	IN     THETA
           0D9 : 20A9;  -- 	SUB    DTheta      ; actual - desired angle
           0DA : 80F3;  -- 	CALL   Neg         ; desired - actual angle
           0DB : 68B4;  -- 	ADDI   180
           0DC : 80EC;  -- 	CALL   Mod360
           0DD : 6F4C;  -- 	ADDI   -180
           0DE : 8800;  -- 	RETURN
           0DF : 20EB;  -- 	SUB     MaxVal
           0E0 : 38E6;  -- 	JPOS    CapVelHigh
           0E1 : 18EB;  -- 	ADD     MaxVal
           0E2 : 18EB;  -- 	ADD     MaxVal
           0E3 : 30E8;  -- 	JNEG    CapVelLow
           0E4 : 20EB;  -- 	SUB     MaxVal
           0E5 : 8800;  -- 	RETURN
           0E6 : 08EB;  -- 	LOAD    MaxVal
           0E7 : 8800;  -- 	RETURN
           0E8 : 08EB;  -- 	LOAD    MaxVal
           0E9 : 80F3;  -- 	CALL    Neg
           0EA : 8800;  -- 	RETURN
           0EB : 01FE;  -- 	MaxVal: DW 510
           0EC : 30EF;  -- 	JNEG   M360N
           0ED : 6E98;  -- 	ADDI   -360
           0EE : 28EC;  -- 	JUMP   Mod360
           0EF : 6968;  -- 	ADDI   360
           0F0 : 30EF;  -- 	JNEG   M360N
           0F1 : 8800;  -- 	RETURN
           0F2 : 38F5;  -- 	JPOS   Abs_r
           0F3 : 5A3B;  -- 	XOR    NegOne       ; Flip all bits
           0F4 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           0F5 : 8800;  -- 	RETURN
           0F6 : 0956;  -- 	LOAD   AtanY
           0F7 : 80F2;  -- 	CALL   Abs          ; abs(y)
           0F8 : 1158;  -- 	STORE  AtanT
           0F9 : 0955;  -- 	LOAD   AtanX        ; abs(x)
           0FA : 80F2;  -- 	CALL   Abs
           0FB : 2158;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           0FC : 3107;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           0FD : 0955;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           0FE : 3104;  -- 	JNEG   A2_R3
           0FF : 8116;  -- 	CALL   A2_calc      ; Octants 1, 8
           100 : 3102;  -- 	JNEG   A2_R1n
           101 : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           102 : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           103 : 8800;  -- 	RETURN
           104 : 8116;  -- 	CALL   A2_calc      ; Octants 4, 5            
           105 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           106 : 8800;  -- 	RETURN
           107 : 0956;  -- 	LOAD   AtanY        ; Swap input arguments
           108 : 1158;  -- 	STORE  AtanT
           109 : 0955;  -- 	LOAD   AtanX
           10A : 1156;  -- 	STORE  AtanY
           10B : 0958;  -- 	LOAD   AtanT
           10C : 1155;  -- 	STORE  AtanX
           10D : 3912;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           10E : 8116;  -- 	CALL   A2_calc      ; else octants 6, 7
           10F : 80F3;  -- 	CALL   Neg          ; Negatge the number
           110 : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           111 : 8800;  -- 	RETURN
           112 : 8116;  -- 	CALL   A2_calc      ; Octants 2, 3
           113 : 80F3;  -- 	CALL   Neg          ; negate the angle
           114 : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           115 : 8800;  -- 	RETURN
           116 : 0956;  -- 	LOAD   AtanY
           117 : 11B5;  -- 	STORE  d16sN        ; Y in numerator
           118 : 0955;  -- 	LOAD   AtanX
           119 : 11B6;  -- 	STORE  d16sD        ; X in denominator
           11A : 8142;  -- 	CALL   A2_div       ; divide
           11B : 09BB;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           11C : 1157;  -- 	STORE  AtanRatio
           11D : 117E;  -- 	STORE  m16sA
           11E : 117F;  -- 	STORE  m16sB
           11F : 8139;  -- 	CALL   A2_mult      ; X^2
           120 : 117E;  -- 	STORE  m16sA
           121 : 0959;  -- 	LOAD   A2c
           122 : 117F;  -- 	STORE  m16sB
           123 : 8139;  -- 	CALL   A2_mult
           124 : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           125 : 11B6;  -- 	STORE  d16sD
           126 : 0957;  -- 	LOAD   AtanRatio
           127 : 11B5;  -- 	STORE  d16sN        ; Ratio in numerator
           128 : 8142;  -- 	CALL   A2_div       ; divide
           129 : 09BB;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           12A : 117E;  -- 	STORE  m16sA        ; <= result in radians
           12B : 095A;  -- 	LOAD   A2cd         ; degree conversion factor
           12C : 117F;  -- 	STORE  m16sB
           12D : 8139;  -- 	CALL   A2_mult      ; convert to degrees
           12E : 1158;  -- 	STORE  AtanT
           12F : 6017;  -- 	SHIFT  -7           ; check 7th bit
           130 : 4A3D;  -- 	AND    One
           131 : 4136;  -- 	JZERO  A2_rdwn      ; round down
           132 : 0958;  -- 	LOAD   AtanT
           133 : 6018;  -- 	SHIFT  -8
           134 : 6801;  -- 	ADDI   1            ; round up
           135 : 8800;  -- 	RETURN
           136 : 0958;  -- 	LOAD   AtanT
           137 : 6018;  -- 	SHIFT  -8           ; round down
           138 : 8800;  -- 	RETURN
           139 : 815B;  -- 	CALL   Mult16s
           13A : 0983;  -- 	LOAD   mres16sH
           13B : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           13C : 1183;  -- 	STORE  mres16sH
           13D : 0982;  -- 	LOAD   mres16sL
           13E : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           13F : 4A4F;  -- 	AND    LowByte
           140 : 5183;  -- 	OR     mres16sH     ; combine high and low words of result
           141 : 8800;  -- 	RETURN
           142 : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           143 : 1158;  -- 	STORE  AtanT
           144 : 0958;  -- 	LOAD   AtanT
           145 : 6FFF;  -- 	ADDI   -1
           146 : 3949;  -- 	JPOS   A2_DN        ; not done; continue shifting
           147 : 8184;  -- 	CALL   Div16s       ; do the standard division
           148 : 8800;  -- 	RETURN
           149 : 1158;  -- 	STORE  AtanT
           14A : 09B5;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           14B : 6001;  -- 	SHIFT  1
           14C : 59B5;  -- 	XOR    d16sN        ; if the sign changed,
           14D : 3151;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           14E : 59B5;  -- 	XOR    d16sN        ; get back shifted version
           14F : 11B5;  -- 	STORE  d16sN
           150 : 2944;  -- 	JUMP   A2_DL
           151 : 09B6;  -- 	LOAD   d16sD
           152 : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           153 : 11B6;  -- 	STORE  d16sD
           154 : 2944;  -- 	JUMP   A2_DL
           155 : 0000;  -- AtanX:      DW 0
           156 : 0000;  -- AtanY:      DW 0
           157 : 0000;  -- AtanRatio:  DW 0        ; =y/x
           158 : 0000;  -- AtanT:      DW 0        ; temporary value
           159 : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           15A : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           15B : B800;  -- 	LOADI  0
           15C : 1180;  -- 	STORE  m16sc        ; clear carry
           15D : 1183;  -- 	STORE  mres16sH     ; clear result
           15E : B810;  -- 	LOADI  16           ; load 16 to counter
           15F : 1181;  -- 	STORE  mcnt16s      
           160 : 0980;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           161 : 4165;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           162 : 0983;  -- 	LOAD   mres16sH     ; if a carry, 
           163 : 197E;  -- 	ADD    m16sA        ;  add multiplicand to result H
           164 : 1183;  -- 	STORE  mres16sH
           165 : 097F;  -- 	LOAD   m16sB
           166 : 4A3D;  -- 	AND    One          ; check bit 0 of multiplier
           167 : 1180;  -- 	STORE  m16sc        ; save as next carry
           168 : 416C;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           169 : 0983;  -- 	LOAD   mres16sH     ; if bit 0 set,
           16A : 217E;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           16B : 1183;  -- 	STORE  mres16sH
           16C : 097F;  -- 	LOAD   m16sB
           16D : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           16E : 497D;  -- 	AND    c7FFF        ; clear msb
           16F : 117F;  -- 	STORE  m16sB
           170 : 0983;  -- 	LOAD   mres16sH     ; load result H
           171 : 600F;  -- 	SHIFT  15           ; move lsb to msb
           172 : 517F;  -- 	OR     m16sB
           173 : 117F;  -- 	STORE  m16sB        ; result L now includes carry out from H
           174 : 0983;  -- 	LOAD   mres16sH
           175 : 6011;  -- 	SHIFT  -1
           176 : 1183;  -- 	STORE  mres16sH     ; shift result H >>1
           177 : 0981;  -- 	LOAD   mcnt16s
           178 : 6FFF;  -- 	ADDI   -1           ; check counter
           179 : 395F;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           17A : 097F;  -- 	LOAD   m16sB
           17B : 1182;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           17C : 8800;  -- 	RETURN              ; Done
           17D : 7FFF;  -- c7FFF: DW &H7FFF
           17E : 0000;  -- m16sA: DW 0 ; multiplicand
           17F : 0000;  -- m16sB: DW 0 ; multipler
           180 : 0000;  -- m16sc: DW 0 ; carry
           181 : 0000;  -- mcnt16s: DW 0 ; counter
           182 : 0000;  -- mres16sL: DW 0 ; result low
           183 : 0000;  -- mres16sH: DW 0 ; result high
           184 : B800;  -- 	LOADI  0
           185 : 11BC;  -- 	STORE  dres16sR     ; clear remainder result
           186 : 11B9;  -- 	STORE  d16sC1       ; clear carry
           187 : 09B5;  -- 	LOAD   d16sN
           188 : 59B6;  -- 	XOR    d16sD
           189 : 11B7;  -- 	STORE  d16sS        ; sign determination = N XOR D
           18A : B811;  -- 	LOADI  17
           18B : 11B8;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           18C : 09B6;  -- 	LOAD   d16sD
           18D : 80F2;  -- 	CALL   Abs          ; take absolute value of denominator
           18E : 11B6;  -- 	STORE  d16sD
           18F : 09B5;  -- 	LOAD   d16sN
           190 : 80F2;  -- 	CALL   Abs          ; take absolute value of numerator
           191 : 11B5;  -- 	STORE  d16sN
           192 : 09B5;  -- 	LOAD   d16sN
           193 : 601F;  -- 	SHIFT  -15          ; get msb
           194 : 4A3D;  -- 	AND    One          ; only msb (because shift is arithmetic)
           195 : 11BA;  -- 	STORE  d16sC2       ; store as carry
           196 : 09B5;  -- 	LOAD   d16sN
           197 : 6001;  -- 	SHIFT  1            ; shift <<1
           198 : 51B9;  -- 	OR     d16sC1       ; with carry
           199 : 11B5;  -- 	STORE  d16sN
           19A : 09B8;  -- 	LOAD   d16sT
           19B : 6FFF;  -- 	ADDI   -1           ; decrement counter
           19C : 41AC;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           19D : 11B8;  -- 	STORE  d16sT
           19E : 09BC;  -- 	LOAD   dres16sR
           19F : 6001;  -- 	SHIFT  1            ; shift remainder
           1A0 : 51BA;  -- 	OR     d16sC2       ; with carry from other shift
           1A1 : 21B6;  -- 	SUB    d16sD        ; subtract denominator from remainder
           1A2 : 31A7;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           1A3 : 11BC;  -- 	STORE  dres16sR
           1A4 : B801;  -- 	LOADI  1
           1A5 : 11B9;  -- 	STORE  d16sC1       ; set carry
           1A6 : 2992;  -- 	JUMP   Div16s_loop
           1A7 : 19B6;  -- 	ADD    d16sD        ; add denominator back in
           1A8 : 11BC;  -- 	STORE  dres16sR
           1A9 : B800;  -- 	LOADI  0
           1AA : 11B9;  -- 	STORE  d16sC1       ; clear carry
           1AB : 2992;  -- 	JUMP   Div16s_loop
           1AC : 09B5;  -- 	LOAD   d16sN
           1AD : 11BB;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           1AE : 09B7;  -- 	LOAD   d16sS        ; check the sign indicator
           1AF : 31B1;  -- 	JNEG   Div16s_neg
           1B0 : 8800;  -- 	RETURN
           1B1 : 09BB;  -- 	LOAD   dres16sQ     ; need to negate the result
           1B2 : 80F3;  -- 	CALL   Neg
           1B3 : 11BB;  -- 	STORE  dres16sQ
           1B4 : 8800;  -- 	RETURN	
           1B5 : 0000;  -- d16sN: DW 0 ; numerator
           1B6 : 0000;  -- d16sD: DW 0 ; denominator
           1B7 : 0000;  -- d16sS: DW 0 ; sign value
           1B8 : 0000;  -- d16sT: DW 0 ; temp counter
           1B9 : 0000;  -- d16sC1: DW 0 ; carry value
           1BA : 0000;  -- d16sC2: DW 0 ; carry value
           1BB : 0000;  -- dres16sQ: DW 0 ; quotient result
           1BC : 0000;  -- dres16sR: DW 0 ; remainder result
           1BD : 09E7;  -- 	LOAD   L2X
           1BE : 80F2;  -- 	CALL   Abs
           1BF : 11E9;  -- 	STORE  L2T1
           1C0 : 09E8;  -- 	LOAD   L2Y
           1C1 : 80F2;  -- 	CALL   Abs
           1C2 : 21E9;  -- 	SUB    L2T1
           1C3 : 31DF;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           1C4 : 19E9;  -- 	ADD    L2T1
           1C5 : 117E;  -- 	STORE  m16sa
           1C6 : B8F6;  -- 	LOADI  246       ; max * 246
           1C7 : 117F;  -- 	STORE  m16sB
           1C8 : 815B;  -- 	CALL   Mult16s
           1C9 : 0983;  -- 	LOAD   mres16sH
           1CA : 6008;  -- 	SHIFT  8
           1CB : 11EA;  -- 	STORE  L2T2
           1CC : 0982;  -- 	LOAD   mres16sL
           1CD : 6018;  -- 	SHIFT  -8        ; / 256
           1CE : 4A4F;  -- 	AND    LowByte
           1CF : 51EA;  -- 	OR     L2T2
           1D0 : 11EB;  -- 	STORE  L2T3
           1D1 : 09E9;  -- 	LOAD   L2T1
           1D2 : 117E;  -- 	STORE  m16sa
           1D3 : B868;  -- 	LOADI  104       ; min * 104
           1D4 : 117F;  -- 	STORE  m16sB
           1D5 : 815B;  -- 	CALL   Mult16s
           1D6 : 0983;  -- 	LOAD   mres16sH
           1D7 : 6008;  -- 	SHIFT  8
           1D8 : 11EA;  -- 	STORE  L2T2
           1D9 : 0982;  -- 	LOAD   mres16sL
           1DA : 6018;  -- 	SHIFT  -8        ; / 256
           1DB : 4A4F;  -- 	AND    LowByte
           1DC : 51EA;  -- 	OR     L2T2
           1DD : 19EB;  -- 	ADD    L2T3     ; sum
           1DE : 8800;  -- 	RETURN
           1DF : 19E9;  -- 	ADD    L2T1
           1E0 : 11EA;  -- 	STORE  L2T2
           1E1 : 09E9;  -- 	LOAD   L2T1
           1E2 : 11EB;  -- 	STORE  L2T3
           1E3 : 09EA;  -- 	LOAD   L2T2
           1E4 : 11E9;  -- 	STORE  L2T1
           1E5 : 09EB;  -- 	LOAD   L2T3
           1E6 : 29C5;  -- 	JUMP   CalcDist
           1E7 : 0000;  -- L2X:  DW 0
           1E8 : 0000;  -- L2Y:  DW 0
           1E9 : 0000;  -- L2T1: DW 0
           1EA : 0000;  -- L2T2: DW 0
           1EB : 0000;  -- L2T3: DW 0
           1EC : 9802;  -- 	OUT    TIMER
           1ED : 9002;  -- 	IN     TIMER
           1EE : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           1EF : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           1F0 : 31ED;  -- 	JNEG   Wloop
           1F1 : 8800;  -- 	RETURN
           1F2 : 820A;  -- 	CALL   GetBattLvl
           1F3 : 41F2;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           1F4 : 2260;  -- 	SUB    MinBatt
           1F5 : 31F8;  -- 	JNEG   DeadBatt
           1F6 : 1A60;  -- 	ADD    MinBatt     ; get original value back
           1F7 : 8800;  -- 	RETURN
           1F8 : B820;  -- 	LOADI  &H20
           1F9 : 980A;  -- 	OUT    BEEP        ; start beep sound
           1FA : 820A;  -- 	CALL   GetBattLvl  ; get the battery level
           1FB : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           1FC : 9805;  -- 	OUT    SSEG2
           1FD : 9806;  -- 	OUT    LCD
           1FE : 0A3C;  -- 	LOAD   Zero
           1FF : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           200 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           201 : 9807;  -- 	OUT    XLEDS
           202 : 81EC;  -- 	CALL   Wait1       ; 1 second
           203 : B940;  -- 	LOADI  &H140       ; short, high-pitched beep
           204 : 980A;  -- 	OUT    BEEP        ; stop beeping
           205 : 0A3C;  -- 	LOAD   Zero
           206 : 9801;  -- 	OUT    LEDS        ; LEDs off
           207 : 9807;  -- 	OUT    XLEDS
           208 : 81EC;  -- 	CALL   Wait1       ; 1 second
           209 : 29F8;  -- 	JUMP   DeadBatt    ; repeat forever
           20A : 0A62;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           20B : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           20C : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           20D : 8218;  -- 	CALL   BlockI2C    ; wait for it to finish
           20E : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           20F : 8800;  -- 	RETURN
           210 : 8218;  -- 	CALL   BlockI2C    ; wait for idle
           211 : 0A61;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           212 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           213 : 0A3C;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           214 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           215 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           216 : 8218;  -- 	CALL   BlockI2C    ; wait for it to finish
           217 : 8800;  -- 	RETURN
           218 : 0A3C;  -- 	LOAD   Zero
           219 : 1226;  -- 	STORE  Temp        ; Used to check for timeout
           21A : 0A26;  -- 	LOAD   Temp
           21B : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           21C : 1226;  -- 	STORE  Temp
           21D : 4221;  -- 	JZERO  I2CError    ; Timeout occurred; error
           21E : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           21F : 3A1A;  -- 	JPOS   BI2CL       ; If not 0, try again
           220 : 8800;  -- 	RETURN             ; Else return
           221 : 0A3C;  -- 	LOAD   Zero
           222 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           223 : 9804;  -- 	OUT    SSEG1
           224 : 9805;  -- 	OUT    SSEG2       ; display error message
           225 : 2A21;  -- 	JUMP   I2CError
           226 : 0000;  -- Temp:			DW 0
           227 : 0000;  -- currDist5:		DW 0
           228 : 0000;  -- currHeading:	DW 0
           229 : 1324;  -- maxDist5:		DW &H1324
           22A : 10B8;  -- minDist5:		DW &H10B8
           22B : 0008;  -- orientADelt: 	DW 8
           22C : 0005;  -- orientADelt2: 	DW 5
           22D : 0000;  -- orientASuccess:	DW 0
           22E : 0000;  -- orientBSuccess: DW 0
           22F : 0000;  -- orientBStep:	DW 0
           230 : FFF6;  -- orientBDelt:	DW -10
           231 : 0006;  -- Mask12:   		DW &B00000110
           232 : 000C;  -- Mask23:   		DW &B00001100
           233 : 0000;  -- currDist1:		DW 0
           234 : 0000;  -- currDist2:		DW 0
           235 : 0000;  -- currDist3:		DW 0
           236 : 0000;  -- baseRatioQ:		DW 0
           237 : 0000;  -- baseRatioR:		DW 0
           238 : 0000;  -- orientBMin:		DW 0
           239 : 0000;  -- orientBMax:		DW 0
           23A : 0550;  -- sinRatio:		DW &H0550	; 100*sin(78)/sin(46) = 1360
           23B : FFFF;  -- NegOne:   DW -1
           23C : 0000;  -- Zero:     DW 0
           23D : 0001;  -- One:      DW 1
           23E : 0002;  -- Two:      DW 2
           23F : 0003;  -- Three:    DW 3
           240 : 0004;  -- Four:     DW 4
           241 : 0005;  -- Five:     DW 5
           242 : 0006;  -- Six:      DW 6
           243 : 0007;  -- Seven:    DW 7
           244 : 0008;  -- Eight:    DW 8
           245 : 0009;  -- Nine:     DW 9
           246 : 000A;  -- Ten:      DW 10
           247 : 0001;  -- Mask0:    DW &B00000001
           248 : 0002;  -- Mask1:    DW &B00000010
           249 : 0004;  -- Mask2:    DW &B00000100
           24A : 0008;  -- Mask3:    DW &B00001000
           24B : 0010;  -- Mask4:    DW &B00010000
           24C : 0020;  -- Mask5:    DW &B00100000
           24D : 0040;  -- Mask6:    DW &B01000000
           24E : 0080;  -- Mask7:    DW &B10000000
           24F : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           250 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           251 : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           252 : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           253 : 024A;  -- Ft2:      DW 586       ; ~2ft in 1.04mm units
           254 : 036F;  -- Ft3:      DW 879
           255 : 0494;  -- Ft4:      DW 1172
           256 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           257 : 00B4;  -- Deg180:   DW 180       ; 180
           258 : 010E;  -- Deg270:   DW 270       ; 270
           259 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           25A : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           25B : FF9C;  -- RSlow:    DW -100
           25C : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           25D : FEA2;  -- RMid:     DW -350
           25E : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           25F : FE0C;  -- RFast:    DW -500
           260 : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           261 : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           262 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
  END;
