-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 28EA;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 0AA6;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 10F2;  -- 	STORE  DVel        ; Reset API variables
           009 : 10F1;  -- 	STORE  DTheta
           00A : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           00B : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           00C : 8272;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00D : 8254;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00E : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00F : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           010 : 4AB5;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           011 : 3817;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           012 : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           013 : 4AB2;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           014 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           015 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           016 : 280F;  -- 	JUMP   WaitForSafety
           017 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           018 : 4AB2;  -- 	AND    Mask1
           019 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           01A : 1288;  -- 	STORE  Temp        ; (overkill, but looks nice)
           01B : 6001;  -- 	SHIFT  1
           01C : 5288;  -- 	OR     Temp
           01D : 9807;  -- 	OUT    XLEDS
           01E : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           01F : 4AB3;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           020 : 3817;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           021 : 0AA6;  -- 	LOAD   Zero
           022 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           023 : 0AA6;  -- 	LOAD   Zero
           024 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue	
           025 : 98C3;  -- 	OUT    RESETPOS    ; reset odometer in case wheels moved after programming
           026 : B800;  -- 	LOADI  0
           027 : 10F2;  -- 	STORE  DVel        ; zero desired forward velocity
           028 : 10F1;  -- 	STORE  DTheta      ; desired heading = 0 degrees
           029 : B80A;  -- 	LOADI  10          ; period = (10 ms * 10) = 0.1s, or 10Hz.
           02A : 980C;  -- 	OUT    CTIMER      ; turn on timer peripheral
           02B : A802;  -- 	SEI    &B0010      ; enable interrupts from source 2 (timer)
           02C : B800;  -- 	LOADI	0
           02D : 10F1;  -- 	STORE	DTheta
           02E : 10F2;  -- 	STORE	DVel
           02F : 8038;  -- 	CALL	orientInit
           030 : 8049;  -- 	CALL 	orientAInit	
           031 : 0A8C;  -- 	LOAD	orientASuccess
           032 : 4030;  -- 	JZERO	StartA
           033 : 8062;  -- 	CALL	orientBInit
           034 : 0A8D;  -- 	LOAD 	orientBSuccess
           035 : 405D;  -- 	JZERO	orientAShortMove
           036 : 80A4;  -- 	CALL	orientCCleanUp 
           037 : 28AD;  -- 	JUMP	Phase2
           038 : 0AA6;  -- 	LOAD	ZERO			; Zeroing out all variables from possible resets
           039 : 1289;  -- 	STORE 	currDist5
           03A : 128A;  -- 	STORE   currDist5B
           03B : 128B;  -- 	STORE   currHeading
           03C : 128C;  -- 	STORE   orientASuccess
           03D : 128D;  -- 	STORE   orientBSuccess
           03E : 128E;  -- 	STORE	OK
           03F : 0AB6;  -- 	LOAD	Mask5			; Enables the sonar 5
           040 : 98B2;  -- 	OUT		SONAREN
           041 : 824E;  -- 	CALL	Wait1	
           042 : 08F1;  -- 	LOAD	DTheta			; Adds a 20 deg bump to allow the sensors to begin reading valid info
           043 : 6814;  -- 	ADDI	20
           044 : 10F1;  -- 	STORE	DTheta
           045 : 8047;  -- 	CALL	orientMoveWait
           046 : 8800;  -- 	RETURN
           047 : 824E;  -- 	CALL	Wait1
           048 : 8800;  -- 	RETURN
           049 : 0AB3;  -- 	LOAD 	Mask2			; LEDS to show in the orient A state
           04A : 9801;  -- 	OUT		LEDS
           04B : B800;  -- 	LOADI	0
           04C : 128C;  -- 	STORE	orientASuccess
           04D : 90AD;  -- 	IN		DIST5			; read sonar 5 distance
           04E : 9804;  -- 	OUT		SSEG1
           04F : 1289;  -- 	STORE 	currDist5		; storing current distance
           050 : 2299;  -- 	SUB		maxDist5	
           051 : 3858;  -- 	JPOS	orientAMove		; above max, move
           052 : 0A89;  -- 	LOAD	currDist5		
           053 : 229A;  -- 	SUB		minDist5
           054 : 3058;  -- 	JNEG	orientAMove 	; below min, move
           055 : B801;  -- 	LOADI	1
           056 : 128C;  -- 	STORE	orientASuccess
           057 : 8800;  -- 	RETURN					; if aligned, stop part A
           058 : 08F1;  -- 	LOAD	DTheta
           059 : 1A9B;  -- 	ADD 	orientADelt		; load amount of move per step
           05A : 10F1;  -- 	STORE  	DTheta      	; desired heading
           05B : 8047;  -- 	CALL	orientMoveWait
           05C : 284D;  -- 	JUMP	orientARun
           05D : 08F1;  -- 	LOAD	DTheta
           05E : 1A9B;  -- 	ADD		orientADelt
           05F : 10F1;  -- 	STORE	DTheta
           060 : 8047;  -- 	CALL	orientMoveWait
           061 : 2830;  -- 	JUMP	StartA
           062 : B800;  -- 	LOADI	0
           063 : 128D;  -- 	STORE	orientBSuccess		; Resets success of orient b move
           064 : 2877;  -- 	JUMP	orientBMove1
           065 : 90AD;  -- 	IN		DIST5				; read sonar 5 distance
           066 : 9804;  -- 	OUT		SSEG1
           067 : 1289;  -- 	STORE 	currDist5			; storing current distance
           068 : 229D;  -- 	SUB		orientBMaxDist5		
           069 : 387F;  -- 	JPOS	orientBMoveReset1 	; above max, reset
           06A : 0A89;  -- 	LOAD	currDist5		
           06B : 229E;  -- 	SUB		orientBMinDist5
           06C : 307F;  -- 	JNEG	orientBMoveReset1 	; below min, reset
           06D : 2889;  -- 	JUMP	orientBMove2
           06E : 90AD;  -- 	IN		DIST5				; read sonar 5 distance
           06F : 9804;  -- 	OUT		SSEG1
           070 : 1289;  -- 	STORE 	currDist5			; storing current distance
           071 : 229D;  -- 	SUB		orientBMaxDist5		
           072 : 3891;  -- 	JPOS	orientBMoveReset2 	; above max, reset 
           073 : 0A89;  -- 	LOAD	currDist5		
           074 : 229E;  -- 	SUB		orientBMinDist5
           075 : 3091;  -- 	JNEG	orientBMoveReset2 	; below min, reset
           076 : 289B;  -- 	JUMP	orientBMoveSuccess 	; Should be successfully orientated so correct orientation and leave
           077 : 0AB4;  -- 	LOAD	Mask3				; LEDS to show in the orient B state
           078 : 9801;  -- 	OUT		LEDS
           079 : 08F1;  -- 	LOAD 	DTheta
           07A : 1A9F;  -- 	ADD 	orientBDelt1		; move before first check to see if any difference
           07B : 10F1;  -- 	STORE  	DTheta      		; desired heading
           07C : 8047;  -- 	CALL	orientMoveWait
           07D : 824E;  -- 	CALL	Wait1
           07E : 2865;  -- 	JUMP	orientBRun1
           07F : B807;  -- 	LOADI	7
           080 : 9806;  -- 	OUT		LCD
           081 : 08F1;  -- 	LOAD 	DTheta
           082 : 229F;  -- 	SUB 	orientBDelt1		; recenter to start orientation
           083 : 10F1;  -- 	STORE  	DTheta      		; desired heading
           084 : 8047;  -- 	CALL	orientMoveWait
           085 : B800;  -- 	LOADI	0
           086 : 128D;  -- 	STORE	orientBSuccess		; Was not successful, so exit
           087 : 128C;  -- 	STORE	orientASuccess
           088 : 8800;  -- 	RETURN
           089 : 0AB5;  -- 	LOAD	Mask4				; LEDS to show in the orient B state
           08A : 9801;  -- 	OUT		LEDS
           08B : 08F1;  -- 	LOAD 	DTheta
           08C : 1AA0;  -- 	ADD 	orientBDelt2		; Rotates the check the other direction
           08D : 10F1;  -- 	STORE	DTheta
           08E : 8047;  -- 	CALL	orientMoveWait
           08F : 824E;  -- 	CALL	Wait1
           090 : 286E;  -- 	JUMP	orientBRun2
           091 : B805;  -- 	LOADI	5
           092 : 9806;  -- 	OUT		LCD
           093 : 08F1;  -- 	LOAD 	DTheta
           094 : 1A9F;  -- 	ADD 	orientBDelt1		; recenter to start orinetation
           095 : 10F1;  -- 	STORE  	DTheta      		; desired heading
           096 : 8047;  -- 	CALL	orientMoveWait
           097 : B800;  -- 	LOADI	0
           098 : 128D;  -- 	STORE	orientBSuccess		; Was not successful, so exit
           099 : 128C;  -- 	STORE	orientASuccess
           09A : 8800;  -- 	RETURN
           09B : 0AB6;  -- 	LOAD	Mask5
           09C : 9801;  -- 	OUT		LEDS
           09D : 08F1;  -- 	LOAD 	DTheta
           09E : 1A9F;  -- 	ADD 	orientBDelt1		; recenter to start orinetation
           09F : 10F1;  -- 	STORE  	DTheta      		; desired heading
           0A0 : 8047;  -- 	CALL	orientMoveWait
           0A1 : B801;  -- 	LOADI	1
           0A2 : 128D;  -- 	STORE	orientBSuccess		; Was successful, so exit
           0A3 : 8800;  -- 	RETURN
           0A4 : 0AB7;  -- 	LOAD	Mask6			; LEDS to show in the orient C state
           0A5 : 9801;  -- 	OUT		LEDS
           0A6 : B800;  -- 	LOADI	0
           0A7 : 98C3;  -- 	OUT		RESETPOS		; Zeros odometry
           0A8 : 10F1;  -- 	STORE	DTheta
           0A9 : BFA4;  -- 	LOADI	-92				; Rotates -90 deg on completion 
           0AA : 10F1;  -- 	STORE	DTheta
           0AB : 824E;  -- 	CALL	Wait1
           0AC : 8800;  -- 	RETURN
           0AD : 0AA1;  -- 	LOAD   	Sonar023       	   
           0AE : 98B2;  -- 	OUT    	SONAREN     	; enable sonar 0, sonar 2, and sonar 3
           0AF : 824E;  -- 	CALL	WAIT1
           0B0 : 824E;  -- 	CALL	WAIT1
           0B1 : 0AA6;  -- 	LOAD   ZERO				; Begins initialization for the setpoints
           0B2 : 98C3;  -- 	OUT	   RESETPOS
           0B3 : 1294;  -- 	STORE  DIST_CMD
           0B4 : 1292;  -- 	STORE  DIST_ACT
           0B5 : 1295;  -- 	STORE  ERR
           0B6 : 10F1;  -- 	STORE  DTHETA		; Initialize heading to zero
           0B7 : 1291;  -- 	STORE  CUM_SUM		; Zero out the error accumulator
           0B8 : B801;  -- 	LOADI	1
           0B9 : 128E;  -- 	STORE	OK
           0BA : 824E;  -- 	CALL	WAIT1
           0BB : 824E;  -- 	CALL	WAIT1
           0BC : 824E;  -- 	CALL	WAIT1
           0BD : 90A8;  -- 	IN		DIST0
           0BE : 1294;  -- 	STORE	DIST_CMD
           0BF : B8E1;  -- 	LOADI  	225		   
           0C0 : 10F2;  -- 	STORE  	DVel			; Initialize velocity to medium speed
           0C1 : 90C2;  -- 	IN 		THETA			; Take in current angular position
           0C2 : 1293;  -- 	STORE	THETA_ACT   	; Store current angular position
           0C3 : 90A8;  -- 	IN		DIST0			; Read distance to left wall
           0C4 : 1292;  -- 	STORE	DIST_ACT		; Store as current distance (possibly add running average and value filtering)
           0C5 : 90AA;  -- 	IN     	DIST2       	; Read distance from back wall
           0C6 : 9804;  -- 	OUT		SSEG1
           0C7 : 22A2;  -- 	SUB		distToWall      ; Subtract 1 ft in mm
           0C8 : 30CE;  -- 	JNEG   	Final			; If the robot is within 1ft of the back wall --> Stop
           0C9 : 90AB;  -- 	IN		DIST3
           0CA : 9805;  -- 	OUT		SSEG2
           0CB : 22A2;  -- 	SUB		distToWall
           0CC : 30CE;  -- 	JNEG 	Final
           0CD : 28C1;  -- 	JUMP  	Loop			; Otherwise Loop
           0CE : BF38;  -- 	LOADI 	&H1738
           0CF : 9806;  -- 	OUT		LCD
           0D0 : 0A94;  -- 	LOAD 	DIST_CMD
           0D1 : 1292;  -- 	STORE 	DIST_ACT
           0D2 : 90AA;  -- 	IN 		DIST2
           0D3 : 6EE8;  -- 	ADDI 	-280
           0D4 : 30D9;  -- 	JNEG 	Wall
           0D5 : 90AB;  -- 	IN		DIST3
           0D6 : 6EE8;  -- 	ADDI 	-280
           0D7 : 30D9;  -- 	JNEG 	Wall
           0D8 : 28CE;  -- 	JUMP 	Final
           0D9 : B800;  -- 	LOADI	0
           0DA : 10F2;  -- 	STORE	DVel
           0DB : 9883;  -- 	OUT		LVELCMD
           0DC : 988B;  -- 	OUT		RVELCMD
           0DD : BFA4;  -- 	LOADI	-92
           0DE : 980A;  -- 	OUT	   	BEEP
           0DF : 824E;  -- 	CALL   	WAIT1
           0E0 : 980A;  -- 	OUT	   	BEEP
           0E1 : A00F;  -- 	CLI    &B1111      	; disable all interrupts
           0E2 : 0AA6;  -- 	LOAD   Zero        	; Stop everything.
           0E3 : 9883;  -- 	OUT    LVELCMD
           0E4 : 988B;  -- 	OUT    RVELCMD
           0E5 : 98B2;  -- 	OUT    SONAREN
           0E6 : 08E9;  -- 	LOAD   DEAD        	; An indication that we are dead
           0E7 : 9805;  -- 	OUT    SSEG2       	; "dEAd" on the sseg
           0E8 : 28E8;  -- 	JUMP   Forever     	; Do this forever.
           0E9 : DEAD;  -- 	DEAD:  DW &HDEAD   	; Example of a "local" variable
           0EA : 0A8E;  -- 	LOAD 	OK
           0EB : 40EF;  -- 	JZERO 	Move	
           0EC : 8134;  -- 	CALL	PI_CNTRL 	; Calculate Heading Correction
           0ED : 0A98;  -- 	LOAD	PI			; Load corrected heading
           0EE : 10F1;  -- 	STORE	DTHETA		; Store into the Control Movement APIs heading SP
           0EF : 80F3;  -- 	CALL    ControlMovement  	; Control Movement API
           0F0 : B000;  -- 	RETI  		 			; return from ISR
           0F1 : 0000;  -- DTheta:    DW 0
           0F2 : 0000;  -- DVel:      DW 0
           0F3 : B832;  -- 	LOADI  50          ; used for the CapValue subroutine
           0F4 : 1133;  -- 	STORE  MaxVal
           0F5 : 8120;  -- 	CALL   GetThetaErr ; get the heading error
           0F6 : 6002;  -- 	SHIFT  2
           0F7 : 111D;  -- 	STORE  CMAErr      ; hold temporarily
           0F8 : 6002;  -- 	SHIFT  2           ; multiply by another 4
           0F9 : 8127;  -- 	CALL   CapValue    ; get a +/- max of 50
           0FA : 191D;  -- 	ADD    CMAErr
           0FB : 111D;  -- 	STORE  CMAErr      ; now contains a desired differential
           0FC : B9FE;  -- 	LOADI  510
           0FD : 1133;  -- 	STORE  MaxVal
           0FE : 08F2;  -- 	LOAD   DVel
           0FF : 8127;  -- 	CALL   CapValue    ; ensure velocity is valid
           100 : 10F2;  -- 	STORE  DVel        ; overwrite any invalid input
           101 : 191D;  -- 	ADD    CMAErr
           102 : 8127;  -- 	CALL   CapValue    ; ensure velocity is valid
           103 : 111F;  -- 	STORE  CMAR
           104 : 091D;  -- 	LOAD   CMAErr
           105 : 8155;  -- 	CALL   Neg         ; left wheel gets negative differential
           106 : 18F2;  -- 	ADD    DVel
           107 : 8127;  -- 	CALL   CapValue
           108 : 111E;  -- 	STORE  CMAL
           109 : 091D;  -- 	LOAD   CMAErr
           10A : 6001;  -- 	SHIFT  1           ; double the differential
           10B : 111D;  -- 	STORE  CMAErr
           10C : 091F;  -- 	LOAD   CMAR
           10D : 211E;  -- 	SUB    CMAL        ; calculate the actual differential
           10E : 211D;  -- 	SUB    CMAErr      ; should be 0 if nothing got capped
           10F : 4118;  -- 	JZERO  CMADone
           110 : 111D;  -- 	STORE  CMAErr      ; the missing part
           111 : 191E;  -- 	ADD    CMAL
           112 : 8127;  -- 	CALL   CapValue
           113 : 111E;  -- 	STORE  CMAL
           114 : 091F;  -- 	LOAD   CMAR
           115 : 211D;  -- 	SUB    CMAErr
           116 : 8127;  -- 	CALL   CapValue
           117 : 111F;  -- 	STORE  CMAR
           118 : 091E;  -- 	LOAD   CMAL
           119 : 9883;  -- 	OUT    LVELCMD
           11A : 091F;  -- 	LOAD   CMAR
           11B : 988B;  -- 	OUT    RVELCMD
           11C : 8800;  -- 	RETURN
           11D : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           11E : 0000;  -- 	CMAL:    DW 0      ; holds temp left velocity
           11F : 0000;  -- 	CMAR:    DW 0      ; holds temp right velocity
           120 : 90C2;  -- 	IN     THETA
           121 : 20F1;  -- 	SUB    DTheta      ; actual - desired angle
           122 : 8155;  -- 	CALL   Neg         ; desired - actual angle
           123 : 68B4;  -- 	ADDI   180
           124 : 814E;  -- 	CALL   Mod360
           125 : 6F4C;  -- 	ADDI   -180
           126 : 8800;  -- 	RETURN
           127 : 2133;  -- 	SUB     MaxVal
           128 : 392E;  -- 	JPOS    CapVelHigh
           129 : 1933;  -- 	ADD     MaxVal
           12A : 1933;  -- 	ADD     MaxVal
           12B : 3130;  -- 	JNEG    CapVelLow
           12C : 2133;  -- 	SUB     MaxVal
           12D : 8800;  -- 	RETURN
           12E : 0933;  -- 	LOAD    MaxVal
           12F : 8800;  -- 	RETURN
           130 : 0933;  -- 	LOAD    MaxVal
           131 : 8155;  -- 	CALL    Neg
           132 : 8800;  -- 	RETURN
           133 : 01FE;  -- 	MaxVal: DW 510
           134 : 0A94;  -- 	LOAD 	DIST_CMD    ; Distance setpoint
           135 : 2292;  -- 	SUB		DIST_ACT	; Current Distance
           136 : 1295;  -- 	STORE	ERR			; Distance error
           137 : 11E0;  -- 	STORE 	m16sA       ; Store in multiplier INPUT A
           138 : 0AA4;  -- 	LOAD 	Kp          ; Proportional Constant
           139 : 11E1;  -- 	STORE	m16sB	    ; Store in multiplier INPUT B
           13A : 81BD;  -- 	CALL 	Mult16s     ; Multiply Kp and ERR
           13B : 09E4;  -- 	LOAD 	mres16sL    ; Return the answer
           13C : 1296;  -- 	STORE 	P_CNTRL     ; Store into P_CNTRL
           13D : 0A91;  -- 	LOAD 	CUM_SUM     ; Cummualtive sum of position error
           13E : 1A95;  -- 	ADD		ERR			; Current error
           13F : 1291;  -- 	STORE	CUM_SUM     ; Store into cumulative sum of position error
           140 : 11E0;  -- 	STORE 	m16sA		; Store in multiplier INPUT A
           141 : 0AA3;  -- 	LOAD 	Ki          ; Load integral constant
           142 : 11E1;  -- 	STORE 	m16sB		; Store in multiplier INPUT B
           143 : 81BD;  -- 	CALL	Mult16s		; Multiply CUM_SUM and Ki
           144 : 09E4;  -- 	LOAD 	mres16sL	; Load the result
           145 : 1297;  -- 	STORE	I_CNTRL		; Store into I_CNTRL
           146 : 0A96;  -- 	LOAD	P_CNTRL		; Proportional Adjustment
           147 : 1A97;  -- 	ADD		I_CNTRL		; Add integral Adjustment
           148 : 6014;  -- 	SHIFT   -4			; This effectively scales the ouput of the controller
           149 : 1298;  -- 	STORE	PI			; Store the adjusted heading result of the PI controller
           14A : 0AA6;  -- 	LOAD	ZERO		; Negates the result of the controller (use if needed)
           14B : 2298;  --     SUB		PI
           14C : 1298;  --     STORE	PI
           14D : 8800;  -- 	RETURN 				; ADJUSTMENT IN AC
           14E : 3151;  -- 	JNEG   M360N
           14F : 6E98;  -- 	ADDI   -360
           150 : 294E;  -- 	JUMP   Mod360
           151 : 6968;  -- 	ADDI   360
           152 : 3151;  -- 	JNEG   M360N
           153 : 8800;  -- 	RETURN
           154 : 3957;  -- 	JPOS   Abs_r
           155 : 5AA5;  -- 	XOR    NegOne       ; Flip all bits
           156 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           157 : 8800;  -- 	RETURN
           158 : 09B8;  -- 	LOAD   AtanY
           159 : 8154;  -- 	CALL   Abs          ; abs(y)
           15A : 11BA;  -- 	STORE  AtanT
           15B : 09B7;  -- 	LOAD   AtanX        ; abs(x)
           15C : 8154;  -- 	CALL   Abs
           15D : 21BA;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           15E : 3169;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           15F : 09B7;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           160 : 3166;  -- 	JNEG   A2_R3
           161 : 8178;  -- 	CALL   A2_calc      ; Octants 1, 8
           162 : 3164;  -- 	JNEG   A2_R1n
           163 : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           164 : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           165 : 8800;  -- 	RETURN
           166 : 8178;  -- 	CALL   A2_calc      ; Octants 4, 5            
           167 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           168 : 8800;  -- 	RETURN
           169 : 09B8;  -- 	LOAD   AtanY        ; Swap input arguments
           16A : 11BA;  -- 	STORE  AtanT
           16B : 09B7;  -- 	LOAD   AtanX
           16C : 11B8;  -- 	STORE  AtanY
           16D : 09BA;  -- 	LOAD   AtanT
           16E : 11B7;  -- 	STORE  AtanX
           16F : 3974;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           170 : 8178;  -- 	CALL   A2_calc      ; else octants 6, 7
           171 : 8155;  -- 	CALL   Neg          ; Negatge the number
           172 : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           173 : 8800;  -- 	RETURN
           174 : 8178;  -- 	CALL   A2_calc      ; Octants 2, 3
           175 : 8155;  -- 	CALL   Neg          ; negate the angle
           176 : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           177 : 8800;  -- 	RETURN
           178 : 09B8;  -- 	LOAD   AtanY
           179 : 1217;  -- 	STORE  d16sN        ; Y in numerator
           17A : 09B7;  -- 	LOAD   AtanX
           17B : 1218;  -- 	STORE  d16sD        ; X in denominator
           17C : 81A4;  -- 	CALL   A2_div       ; divide
           17D : 0A1D;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           17E : 11B9;  -- 	STORE  AtanRatio
           17F : 11E0;  -- 	STORE  m16sA
           180 : 11E1;  -- 	STORE  m16sB
           181 : 819B;  -- 	CALL   A2_mult      ; X^2
           182 : 11E0;  -- 	STORE  m16sA
           183 : 09BB;  -- 	LOAD   A2c
           184 : 11E1;  -- 	STORE  m16sB
           185 : 819B;  -- 	CALL   A2_mult
           186 : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           187 : 1218;  -- 	STORE  d16sD
           188 : 09B9;  -- 	LOAD   AtanRatio
           189 : 1217;  -- 	STORE  d16sN        ; Ratio in numerator
           18A : 81A4;  -- 	CALL   A2_div       ; divide
           18B : 0A1D;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           18C : 11E0;  -- 	STORE  m16sA        ; <= result in radians
           18D : 09BC;  -- 	LOAD   A2cd         ; degree conversion factor
           18E : 11E1;  -- 	STORE  m16sB
           18F : 819B;  -- 	CALL   A2_mult      ; convert to degrees
           190 : 11BA;  -- 	STORE  AtanT
           191 : 6017;  -- 	SHIFT  -7           ; check 7th bit
           192 : 4AA7;  -- 	AND    One
           193 : 4198;  -- 	JZERO  A2_rdwn      ; round down
           194 : 09BA;  -- 	LOAD   AtanT
           195 : 6018;  -- 	SHIFT  -8
           196 : 6801;  -- 	ADDI   1            ; round up
           197 : 8800;  -- 	RETURN
           198 : 09BA;  -- 	LOAD   AtanT
           199 : 6018;  -- 	SHIFT  -8           ; round down
           19A : 8800;  -- 	RETURN
           19B : 81BD;  -- 	CALL   Mult16s
           19C : 09E5;  -- 	LOAD   mres16sH
           19D : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           19E : 11E5;  -- 	STORE  mres16sH
           19F : 09E4;  -- 	LOAD   mres16sL
           1A0 : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           1A1 : 4AB9;  -- 	AND    LowByte
           1A2 : 51E5;  -- 	OR     mres16sH     ; combine high and low words of result
           1A3 : 8800;  -- 	RETURN
           1A4 : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           1A5 : 11BA;  -- 	STORE  AtanT
           1A6 : 09BA;  -- 	LOAD   AtanT
           1A7 : 6FFF;  -- 	ADDI   -1
           1A8 : 39AB;  -- 	JPOS   A2_DN        ; not done; continue shifting
           1A9 : 81E6;  -- 	CALL   Div16s       ; do the standard division
           1AA : 8800;  -- 	RETURN
           1AB : 11BA;  -- 	STORE  AtanT
           1AC : 0A17;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           1AD : 6001;  -- 	SHIFT  1
           1AE : 5A17;  -- 	XOR    d16sN        ; if the sign changed,
           1AF : 31B3;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           1B0 : 5A17;  -- 	XOR    d16sN        ; get back shifted version
           1B1 : 1217;  -- 	STORE  d16sN
           1B2 : 29A6;  -- 	JUMP   A2_DL
           1B3 : 0A18;  -- 	LOAD   d16sD
           1B4 : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           1B5 : 1218;  -- 	STORE  d16sD
           1B6 : 29A6;  -- 	JUMP   A2_DL
           1B7 : 0000;  -- AtanX:      DW 0
           1B8 : 0000;  -- AtanY:      DW 0
           1B9 : 0000;  -- AtanRatio:  DW 0        ; =y/x
           1BA : 0000;  -- AtanT:      DW 0        ; temporary value
           1BB : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           1BC : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           1BD : B800;  -- 	LOADI  0
           1BE : 11E2;  -- 	STORE  m16sc        ; clear carry
           1BF : 11E5;  -- 	STORE  mres16sH     ; clear result
           1C0 : B810;  -- 	LOADI  16           ; load 16 to counter
           1C1 : 11E3;  -- 	STORE  mcnt16s      
           1C2 : 09E2;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           1C3 : 41C7;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           1C4 : 09E5;  -- 	LOAD   mres16sH     ; if a carry, 
           1C5 : 19E0;  -- 	ADD    m16sA        ;  add multiplicand to result H
           1C6 : 11E5;  -- 	STORE  mres16sH
           1C7 : 09E1;  -- 	LOAD   m16sB
           1C8 : 4AA7;  -- 	AND    One          ; check bit 0 of multiplier
           1C9 : 11E2;  -- 	STORE  m16sc        ; save as next carry
           1CA : 41CE;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           1CB : 09E5;  -- 	LOAD   mres16sH     ; if bit 0 set,
           1CC : 21E0;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           1CD : 11E5;  -- 	STORE  mres16sH
           1CE : 09E1;  -- 	LOAD   m16sB
           1CF : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           1D0 : 49DF;  -- 	AND    c7FFF        ; clear msb
           1D1 : 11E1;  -- 	STORE  m16sB
           1D2 : 09E5;  -- 	LOAD   mres16sH     ; load result H
           1D3 : 600F;  -- 	SHIFT  15           ; move lsb to msb
           1D4 : 51E1;  -- 	OR     m16sB
           1D5 : 11E1;  -- 	STORE  m16sB        ; result L now includes carry out from H
           1D6 : 09E5;  -- 	LOAD   mres16sH
           1D7 : 6011;  -- 	SHIFT  -1
           1D8 : 11E5;  -- 	STORE  mres16sH     ; shift result H >>1
           1D9 : 09E3;  -- 	LOAD   mcnt16s
           1DA : 6FFF;  -- 	ADDI   -1           ; check counter
           1DB : 39C1;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           1DC : 09E1;  -- 	LOAD   m16sB
           1DD : 11E4;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           1DE : 8800;  -- 	RETURN              ; Done
           1DF : 7FFF;  -- c7FFF: DW &H7FFF
           1E0 : 0000;  -- m16sA: DW 0 ; multiplicand
           1E1 : 0000;  -- m16sB: DW 0 ; multipler
           1E2 : 0000;  -- m16sc: DW 0 ; carry
           1E3 : 0000;  -- mcnt16s: DW 0 ; counter
           1E4 : 0000;  -- mres16sL: DW 0 ; result low
           1E5 : 0000;  -- mres16sH: DW 0 ; result high
           1E6 : B800;  -- 	LOADI  0
           1E7 : 121E;  -- 	STORE  dres16sR     ; clear remainder result
           1E8 : 121B;  -- 	STORE  d16sC1       ; clear carry
           1E9 : 0A17;  -- 	LOAD   d16sN
           1EA : 5A18;  -- 	XOR    d16sD
           1EB : 1219;  -- 	STORE  d16sS        ; sign determination = N XOR D
           1EC : B811;  -- 	LOADI  17
           1ED : 121A;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           1EE : 0A18;  -- 	LOAD   d16sD
           1EF : 8154;  -- 	CALL   Abs          ; take absolute value of denominator
           1F0 : 1218;  -- 	STORE  d16sD
           1F1 : 0A17;  -- 	LOAD   d16sN
           1F2 : 8154;  -- 	CALL   Abs          ; take absolute value of numerator
           1F3 : 1217;  -- 	STORE  d16sN
           1F4 : 0A17;  -- 	LOAD   d16sN
           1F5 : 601F;  -- 	SHIFT  -15          ; get msb
           1F6 : 4AA7;  -- 	AND    One          ; only msb (because shift is arithmetic)
           1F7 : 121C;  -- 	STORE  d16sC2       ; store as carry
           1F8 : 0A17;  -- 	LOAD   d16sN
           1F9 : 6001;  -- 	SHIFT  1            ; shift <<1
           1FA : 521B;  -- 	OR     d16sC1       ; with carry
           1FB : 1217;  -- 	STORE  d16sN
           1FC : 0A1A;  -- 	LOAD   d16sT
           1FD : 6FFF;  -- 	ADDI   -1           ; decrement counter
           1FE : 420E;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           1FF : 121A;  -- 	STORE  d16sT
           200 : 0A1E;  -- 	LOAD   dres16sR
           201 : 6001;  -- 	SHIFT  1            ; shift remainder
           202 : 521C;  -- 	OR     d16sC2       ; with carry from other shift
           203 : 2218;  -- 	SUB    d16sD        ; subtract denominator from remainder
           204 : 3209;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           205 : 121E;  -- 	STORE  dres16sR
           206 : B801;  -- 	LOADI  1
           207 : 121B;  -- 	STORE  d16sC1       ; set carry
           208 : 29F4;  -- 	JUMP   Div16s_loop
           209 : 1A18;  -- 	ADD    d16sD        ; add denominator back in
           20A : 121E;  -- 	STORE  dres16sR
           20B : B800;  -- 	LOADI  0
           20C : 121B;  -- 	STORE  d16sC1       ; clear carry
           20D : 29F4;  -- 	JUMP   Div16s_loop
           20E : 0A17;  -- 	LOAD   d16sN
           20F : 121D;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           210 : 0A19;  -- 	LOAD   d16sS        ; check the sign indicator
           211 : 3213;  -- 	JNEG   Div16s_neg
           212 : 8800;  -- 	RETURN
           213 : 0A1D;  -- 	LOAD   dres16sQ     ; need to negate the result
           214 : 8155;  -- 	CALL   Neg
           215 : 121D;  -- 	STORE  dres16sQ
           216 : 8800;  -- 	RETURN	
           217 : 0000;  -- d16sN: DW 0 ; numerator
           218 : 0000;  -- d16sD: DW 0 ; denominator
           219 : 0000;  -- d16sS: DW 0 ; sign value
           21A : 0000;  -- d16sT: DW 0 ; temp counter
           21B : 0000;  -- d16sC1: DW 0 ; carry value
           21C : 0000;  -- d16sC2: DW 0 ; carry value
           21D : 0000;  -- dres16sQ: DW 0 ; quotient result
           21E : 0000;  -- dres16sR: DW 0 ; remainder result
           21F : 0A49;  -- 	LOAD   L2X
           220 : 8154;  -- 	CALL   Abs
           221 : 124B;  -- 	STORE  L2T1
           222 : 0A4A;  -- 	LOAD   L2Y
           223 : 8154;  -- 	CALL   Abs
           224 : 224B;  -- 	SUB    L2T1
           225 : 3241;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           226 : 1A4B;  -- 	ADD    L2T1
           227 : 11E0;  -- 	STORE  m16sa
           228 : B8F6;  -- 	LOADI  246       ; max * 246
           229 : 11E1;  -- 	STORE  m16sB
           22A : 81BD;  -- 	CALL   Mult16s
           22B : 09E5;  -- 	LOAD   mres16sH
           22C : 6008;  -- 	SHIFT  8
           22D : 124C;  -- 	STORE  L2T2
           22E : 09E4;  -- 	LOAD   mres16sL
           22F : 6018;  -- 	SHIFT  -8        ; / 256
           230 : 4AB9;  -- 	AND    LowByte
           231 : 524C;  -- 	OR     L2T2
           232 : 124D;  -- 	STORE  L2T3
           233 : 0A4B;  -- 	LOAD   L2T1
           234 : 11E0;  -- 	STORE  m16sa
           235 : B868;  -- 	LOADI  104       ; min * 104
           236 : 11E1;  -- 	STORE  m16sB
           237 : 81BD;  -- 	CALL   Mult16s
           238 : 09E5;  -- 	LOAD   mres16sH
           239 : 6008;  -- 	SHIFT  8
           23A : 124C;  -- 	STORE  L2T2
           23B : 09E4;  -- 	LOAD   mres16sL
           23C : 6018;  -- 	SHIFT  -8        ; / 256
           23D : 4AB9;  -- 	AND    LowByte
           23E : 524C;  -- 	OR     L2T2
           23F : 1A4D;  -- 	ADD    L2T3     ; sum
           240 : 8800;  -- 	RETURN
           241 : 1A4B;  -- 	ADD    L2T1
           242 : 124C;  -- 	STORE  L2T2
           243 : 0A4B;  -- 	LOAD   L2T1
           244 : 124D;  -- 	STORE  L2T3
           245 : 0A4C;  -- 	LOAD   L2T2
           246 : 124B;  -- 	STORE  L2T1
           247 : 0A4D;  -- 	LOAD   L2T3
           248 : 2A27;  -- 	JUMP   CalcDist
           249 : 0000;  -- L2X:  DW 0
           24A : 0000;  -- L2Y:  DW 0
           24B : 0000;  -- L2T1: DW 0
           24C : 0000;  -- L2T2: DW 0
           24D : 0000;  -- L2T3: DW 0
           24E : 9802;  -- 	OUT    TIMER
           24F : 9002;  -- 	IN     TIMER
           250 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           251 : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           252 : 324F;  -- 	JNEG   Wloop
           253 : 8800;  -- 	RETURN
           254 : 826C;  -- 	CALL   GetBattLvl
           255 : 4254;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           256 : 22CA;  -- 	SUB    MinBatt
           257 : 325A;  -- 	JNEG   DeadBatt
           258 : 1ACA;  -- 	ADD    MinBatt     ; get original value back
           259 : 8800;  -- 	RETURN
           25A : B820;  -- 	LOADI  &H20
           25B : 980A;  -- 	OUT    BEEP        ; start beep sound
           25C : 826C;  -- 	CALL   GetBattLvl  ; get the battery level
           25D : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           25E : 9805;  -- 	OUT    SSEG2
           25F : 9806;  -- 	OUT    LCD
           260 : 0AA6;  -- 	LOAD   Zero
           261 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           262 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           263 : 9807;  -- 	OUT    XLEDS
           264 : 824E;  -- 	CALL   Wait1       ; 1 second
           265 : B940;  -- 	LOADI  &H140       ; short, high-pitched beep
           266 : 980A;  -- 	OUT    BEEP        ; stop beeping
           267 : 0AA6;  -- 	LOAD   Zero
           268 : 9801;  -- 	OUT    LEDS        ; LEDs off
           269 : 9807;  -- 	OUT    XLEDS
           26A : 824E;  -- 	CALL   Wait1       ; 1 second
           26B : 2A5A;  -- 	JUMP   DeadBatt    ; repeat forever
           26C : 0ACC;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           26D : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           26E : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           26F : 827A;  -- 	CALL   BlockI2C    ; wait for it to finish
           270 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           271 : 8800;  -- 	RETURN
           272 : 827A;  -- 	CALL   BlockI2C    ; wait for idle
           273 : 0ACB;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           274 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           275 : 0AA6;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           276 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           277 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           278 : 827A;  -- 	CALL   BlockI2C    ; wait for it to finish
           279 : 8800;  -- 	RETURN
           27A : 0AA6;  -- 	LOAD   Zero
           27B : 1288;  -- 	STORE  Temp        ; Used to check for timeout
           27C : 0A88;  -- 	LOAD   Temp
           27D : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           27E : 1288;  -- 	STORE  Temp
           27F : 4283;  -- 	JZERO  I2CError    ; Timeout occurred; error
           280 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           281 : 3A7C;  -- 	JPOS   BI2CL       ; If not 0, try again
           282 : 8800;  -- 	RETURN             ; Else return
           283 : 0AA6;  -- 	LOAD   Zero
           284 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           285 : 9804;  -- 	OUT    SSEG1
           286 : 9805;  -- 	OUT    SSEG2       ; display error message
           287 : 2A83;  -- 	JUMP   I2CError
           288 : 0000;  -- Temp:     			DW 0 	; "Temp" is not a great name, but can be useful
           289 : 0000;  -- currDist5:			DW 0
           28A : 0000;  -- currDist5B:			DW 0
           28B : 0000;  -- currHeading:		DW 0
           28C : 0000;  -- orientASuccess:		DW 0
           28D : 0000;  -- orientBSuccess: 	DW 0
           28E : 0000;  -- OK:					DW 0
           28F : 0000;  -- DIST_WALL:			DW 0	;
           290 : 0000;  -- DIST:				DW 0	;
           291 : 0000;  -- CUM_SUM:			DW 0	; Cumulative sum of position error
           292 : 0000;  -- DIST_ACT:			DW 0	; Current Distance to left Wall (Sonar 0)
           293 : 0000;  -- THETA_ACT:			DW 0 	; Current heading angle (from odometry)
           294 : 0000;  -- DIST_CMD:			DW 0 	; SP for the PI Controller
           295 : 0000;  -- ERR:				DW 0 	; Position Error
           296 : 0000;  -- P_CNTRL:			DW 0 	; Proportional Control Term of the PI Controller
           297 : 0000;  -- I_CNTRL:			DW 0 	; Integral Control Term of the PI Controller
           298 : 0000;  -- PI:					DW 0	; PI Controller Output - Heading Correction
           299 : 12F6;  -- maxDist5:			DW 4854
           29A : 1004;  -- minDist5:			DW 4100
           29B : 000A;  -- orientADelt: 		DW 10
           29C : 0005;  -- orientADelt2: 		DW 5
           29D : 1388;  -- orientBMaxDist5:	DW 5000
           29E : 1068;  -- orientBMinDist5:	DW 4200
           29F : FFF8;  -- orientBDelt1:		DW -8
           2A0 : 0014;  -- orientBDelt2:		DW 20
           2A1 : 000D;  -- Sonar023:   		DW &B00001101
           2A2 : 05DC;  -- distToWall:			DW 1500
           2A3 : 0001;  -- Ki:		  			DW 1	; Integral Constant Setpoint for the PI Controller (experimentally tuned for position tracking)
           2A4 : 0002;  -- Kp: 	  			DW 2	; Proportional Constant Setpoint for the PI Controller (experimentally tuned for position tracking)
           2A5 : FFFF;  -- NegOne:   DW -1
           2A6 : 0000;  -- Zero:     DW 0
           2A7 : 0001;  -- One:      DW 1
           2A8 : 0002;  -- Two:      DW 2
           2A9 : 0003;  -- Three:    DW 3
           2AA : 0004;  -- Four:     DW 4
           2AB : 0005;  -- Five:     DW 5
           2AC : 0006;  -- Six:      DW 6
           2AD : 0007;  -- Seven:    DW 7
           2AE : 0008;  -- Eight:    DW 8
           2AF : 0009;  -- Nine:     DW 9
           2B0 : 000A;  -- Ten:      DW 10
           2B1 : 0001;  -- Mask0:    DW &B00000001
           2B2 : 0002;  -- Mask1:    DW &B00000010
           2B3 : 0004;  -- Mask2:    DW &B00000100
           2B4 : 0008;  -- Mask3:    DW &B00001000
           2B5 : 0010;  -- Mask4:    DW &B00010000
           2B6 : 0020;  -- Mask5:    DW &B00100000
           2B7 : 0040;  -- Mask6:    DW &B01000000
           2B8 : 0080;  -- Mask7:    DW &B10000000
           2B9 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           2BA : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           2BB : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           2BC : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           2BD : 024A;  -- Ft2:      DW 586       ; ~2ft in 1.04mm units
           2BE : 036F;  -- Ft3:      DW 879
           2BF : 0494;  -- Ft4:      DW 1172
           2C0 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           2C1 : 00B4;  -- Deg180:   DW 180       ; 180
           2C2 : 010E;  -- Deg270:   DW 270       ; 270
           2C3 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           2C4 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           2C5 : FF9C;  -- RSlow:    DW -100
           2C6 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           2C7 : FEA2;  -- RMid:     DW -350
           2C8 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           2C9 : FE0C;  -- RFast:    DW -500
           2CA : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           2CB : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           2CC : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
  END;
