-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 2849;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 09CA;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 104C;  -- 	STORE  DVel        ; Reset API variables
           009 : 104B;  -- 	STORE  DTheta
           00A : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           00B : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           00C : 81B2;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00D : 8194;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00E : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00F : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           010 : 49D9;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           011 : 3817;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           012 : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           013 : 49D6;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           014 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           015 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           016 : 280F;  -- 	JUMP   WaitForSafety
           017 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           018 : 49D6;  -- 	AND    Mask1
           019 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           01A : 11C8;  -- 	STORE  Temp        ; (overkill, but looks nice)
           01B : 6001;  -- 	SHIFT  1
           01C : 51C8;  -- 	OR     Temp
           01D : 9807;  -- 	OUT    XLEDS
           01E : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           01F : 49D7;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           020 : 3817;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           021 : 09CA;  -- 	LOAD   Zero
           022 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           023 : 98C3;  -- 	OUT    RESETPOS    ; reset odometer in case wheels moved after programming
           024 : B800;  -- 	LOADI  0
           025 : 104C;  -- 	STORE  DVel        ; zero desired forward velocity
           026 : 104B;  -- 	STORE  DTheta      ; desired heading = 0 degrees
           027 : B80A;  -- 	LOADI  10          ; period = (10 ms * 10) = 0.1s, or 10Hz.
           028 : 980C;  -- 	OUT    CTIMER      ; turn on timer peripheral
           029 : A802;  -- 	SEI    &B0010      ; enable interrupts from source 2 (timer)
           02A : B800;  -- 	LOADI  0
           02B : 104C;  -- 	STORE  DVel        ; turn in-place (zero velocity)
           02C : B90E;  -- 	LOADI  270         ; 270 is 90 to the right
           02D : 104B;  -- 	STORE  DTheta      ; desired heading
           02E : 807A;  -- 	CALL   GetThetaErr ; get the heading error
           02F : 8094;  -- 	CALL   Abs         ; absolute value
           030 : 9806;  -- 	OUT    LCD         ; useful debug info
           031 : 6FFB;  -- 	ADDI   -5          ; check if within 5 degrees of target
           032 : 382E;  -- 	JPOS   Test1       ; if not, keep testing
           033 : 09D7;  -- 	LOAD   Mask2       ; defined below as 0b0100
           034 : 98B2;  -- 	OUT    SONAREN     ; enable sonar 2
           035 : 09E8;  -- 	LOAD   FSlow       ; defined below as 100
           036 : 104C;  -- 	STORE  DVel
           037 : 90C1;  -- 	IN     YPOS        ; get the Y position from odometry
           038 : 19E3;  -- 	ADD    Ft4         ; defined below as 4 ft in robot units
           039 : 9806;  -- 	OUT    LCD         ; useful debug info
           03A : 3040;  -- 	JNEG   Die         ; if past 4 ft, stop
           03B : 90AA;  -- 	IN     DIST2       ; get sonar2 distance
           03C : 9804;  -- 	OUT    SSEG1       ; useful debug info
           03D : 6D9E;  -- 	ADDI   -610        ; 2ft in mm
           03E : 3040;  -- 	JNEG   Die
           03F : 2837;  -- 	JUMP   Test2       ; still going
           040 : A00F;  -- 	CLI    &B1111      ; disable all interrupts
           041 : 09CA;  -- 	LOAD   Zero        ; Stop everything.
           042 : 9883;  -- 	OUT    LVELCMD
           043 : 988B;  -- 	OUT    RVELCMD
           044 : 98B2;  -- 	OUT    SONAREN
           045 : 0848;  -- 	LOAD   DEAD        ; An indication that we are dead
           046 : 9805;  -- 	OUT    SSEG2       ; "dEAd" on the sseg
           047 : 2847;  -- 	JUMP   Forever     ; Do this forever.
           048 : DEAD;  -- 	DEAD:  DW &HDEAD   ; Example of a "local" variable
           049 : 804D;  -- 	CALL   ControlMovement
           04A : B000;  -- 	RETI   ; return from ISR
           04B : 0000;  -- DTheta:    DW 0
           04C : 0000;  -- DVel:      DW 0
           04D : B832;  -- 	LOADI  50          ; used for the CapValue subroutine
           04E : 108D;  -- 	STORE  MaxVal
           04F : 807A;  -- 	CALL   GetThetaErr ; get the heading error
           050 : 6002;  -- 	SHIFT  2
           051 : 1077;  -- 	STORE  CMAErr      ; hold temporarily
           052 : 6002;  -- 	SHIFT  2           ; multiply by another 4
           053 : 8081;  -- 	CALL   CapValue    ; get a +/- max of 50
           054 : 1877;  -- 	ADD    CMAErr
           055 : 1077;  -- 	STORE  CMAErr      ; now contains a desired differential
           056 : B9FE;  -- 	LOADI  510
           057 : 108D;  -- 	STORE  MaxVal
           058 : 084C;  -- 	LOAD   DVel
           059 : 8081;  -- 	CALL   CapValue    ; ensure velocity is valid
           05A : 104C;  -- 	STORE  DVel        ; overwrite any invalid input
           05B : 1877;  -- 	ADD    CMAErr
           05C : 8081;  -- 	CALL   CapValue    ; ensure velocity is valid
           05D : 1079;  -- 	STORE  CMAR
           05E : 0877;  -- 	LOAD   CMAErr
           05F : 8095;  -- 	CALL   Neg         ; left wheel gets negative differential
           060 : 184C;  -- 	ADD    DVel
           061 : 8081;  -- 	CALL   CapValue
           062 : 1078;  -- 	STORE  CMAL
           063 : 0877;  -- 	LOAD   CMAErr
           064 : 6001;  -- 	SHIFT  1           ; double the differential
           065 : 1077;  -- 	STORE  CMAErr
           066 : 0879;  -- 	LOAD   CMAR
           067 : 2078;  -- 	SUB    CMAL        ; calculate the actual differential
           068 : 2077;  -- 	SUB    CMAErr      ; should be 0 if nothing got capped
           069 : 4072;  -- 	JZERO  CMADone
           06A : 1077;  -- 	STORE  CMAErr      ; the missing part
           06B : 1878;  -- 	ADD    CMAL
           06C : 8081;  -- 	CALL   CapValue
           06D : 1078;  -- 	STORE  CMAL
           06E : 0879;  -- 	LOAD   CMAR
           06F : 2077;  -- 	SUB    CMAErr
           070 : 8081;  -- 	CALL   CapValue
           071 : 1079;  -- 	STORE  CMAR
           072 : 0878;  -- 	LOAD   CMAL
           073 : 9883;  -- 	OUT    LVELCMD
           074 : 0879;  -- 	LOAD   CMAR
           075 : 988B;  -- 	OUT    RVELCMD
           076 : 8800;  -- 	RETURN
           077 : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           078 : 0000;  -- 	CMAL:    DW 0      ; holds temp left velocity
           079 : 0000;  -- 	CMAR:    DW 0      ; holds temp right velocity
           07A : 90C2;  -- 	IN     THETA
           07B : 204B;  -- 	SUB    DTheta      ; actual - desired angle
           07C : 8095;  -- 	CALL   Neg         ; desired - actual angle
           07D : 68B4;  -- 	ADDI   180
           07E : 808E;  -- 	CALL   Mod360
           07F : 6F4C;  -- 	ADDI   -180
           080 : 8800;  -- 	RETURN
           081 : 208D;  -- 	SUB     MaxVal
           082 : 3888;  -- 	JPOS    CapVelHigh
           083 : 188D;  -- 	ADD     MaxVal
           084 : 188D;  -- 	ADD     MaxVal
           085 : 308A;  -- 	JNEG    CapVelLow
           086 : 208D;  -- 	SUB     MaxVal
           087 : 8800;  -- 	RETURN
           088 : 088D;  -- 	LOAD    MaxVal
           089 : 8800;  -- 	RETURN
           08A : 088D;  -- 	LOAD    MaxVal
           08B : 8095;  -- 	CALL    Neg
           08C : 8800;  -- 	RETURN
           08D : 01FE;  -- 	MaxVal: DW 510
           08E : 3091;  -- 	JNEG   M360N
           08F : 6E98;  -- 	ADDI   -360
           090 : 288E;  -- 	JUMP   Mod360
           091 : 6968;  -- 	ADDI   360
           092 : 3091;  -- 	JNEG   M360N
           093 : 8800;  -- 	RETURN
           094 : 3897;  -- 	JPOS   Abs_r
           095 : 59C9;  -- 	XOR    NegOne       ; Flip all bits
           096 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           097 : 8800;  -- 	RETURN
           098 : 08F8;  -- 	LOAD   AtanY
           099 : 8094;  -- 	CALL   Abs          ; abs(y)
           09A : 10FA;  -- 	STORE  AtanT
           09B : 08F7;  -- 	LOAD   AtanX        ; abs(x)
           09C : 8094;  -- 	CALL   Abs
           09D : 20FA;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           09E : 30A9;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           09F : 08F7;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           0A0 : 30A6;  -- 	JNEG   A2_R3
           0A1 : 80B8;  -- 	CALL   A2_calc      ; Octants 1, 8
           0A2 : 30A4;  -- 	JNEG   A2_R1n
           0A3 : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           0A4 : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           0A5 : 8800;  -- 	RETURN
           0A6 : 80B8;  -- 	CALL   A2_calc      ; Octants 4, 5            
           0A7 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           0A8 : 8800;  -- 	RETURN
           0A9 : 08F8;  -- 	LOAD   AtanY        ; Swap input arguments
           0AA : 10FA;  -- 	STORE  AtanT
           0AB : 08F7;  -- 	LOAD   AtanX
           0AC : 10F8;  -- 	STORE  AtanY
           0AD : 08FA;  -- 	LOAD   AtanT
           0AE : 10F7;  -- 	STORE  AtanX
           0AF : 38B4;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           0B0 : 80B8;  -- 	CALL   A2_calc      ; else octants 6, 7
           0B1 : 8095;  -- 	CALL   Neg          ; Negatge the number
           0B2 : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           0B3 : 8800;  -- 	RETURN
           0B4 : 80B8;  -- 	CALL   A2_calc      ; Octants 2, 3
           0B5 : 8095;  -- 	CALL   Neg          ; negate the angle
           0B6 : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           0B7 : 8800;  -- 	RETURN
           0B8 : 08F8;  -- 	LOAD   AtanY
           0B9 : 1157;  -- 	STORE  d16sN        ; Y in numerator
           0BA : 08F7;  -- 	LOAD   AtanX
           0BB : 1158;  -- 	STORE  d16sD        ; X in denominator
           0BC : 80E4;  -- 	CALL   A2_div       ; divide
           0BD : 095D;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           0BE : 10F9;  -- 	STORE  AtanRatio
           0BF : 1120;  -- 	STORE  m16sA
           0C0 : 1121;  -- 	STORE  m16sB
           0C1 : 80DB;  -- 	CALL   A2_mult      ; X^2
           0C2 : 1120;  -- 	STORE  m16sA
           0C3 : 08FB;  -- 	LOAD   A2c
           0C4 : 1121;  -- 	STORE  m16sB
           0C5 : 80DB;  -- 	CALL   A2_mult
           0C6 : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           0C7 : 1158;  -- 	STORE  d16sD
           0C8 : 08F9;  -- 	LOAD   AtanRatio
           0C9 : 1157;  -- 	STORE  d16sN        ; Ratio in numerator
           0CA : 80E4;  -- 	CALL   A2_div       ; divide
           0CB : 095D;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           0CC : 1120;  -- 	STORE  m16sA        ; <= result in radians
           0CD : 08FC;  -- 	LOAD   A2cd         ; degree conversion factor
           0CE : 1121;  -- 	STORE  m16sB
           0CF : 80DB;  -- 	CALL   A2_mult      ; convert to degrees
           0D0 : 10FA;  -- 	STORE  AtanT
           0D1 : 6017;  -- 	SHIFT  -7           ; check 7th bit
           0D2 : 49CB;  -- 	AND    One
           0D3 : 40D8;  -- 	JZERO  A2_rdwn      ; round down
           0D4 : 08FA;  -- 	LOAD   AtanT
           0D5 : 6018;  -- 	SHIFT  -8
           0D6 : 6801;  -- 	ADDI   1            ; round up
           0D7 : 8800;  -- 	RETURN
           0D8 : 08FA;  -- 	LOAD   AtanT
           0D9 : 6018;  -- 	SHIFT  -8           ; round down
           0DA : 8800;  -- 	RETURN
           0DB : 80FD;  -- 	CALL   Mult16s
           0DC : 0925;  -- 	LOAD   mres16sH
           0DD : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           0DE : 1125;  -- 	STORE  mres16sH
           0DF : 0924;  -- 	LOAD   mres16sL
           0E0 : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           0E1 : 49DD;  -- 	AND    LowByte
           0E2 : 5125;  -- 	OR     mres16sH     ; combine high and low words of result
           0E3 : 8800;  -- 	RETURN
           0E4 : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           0E5 : 10FA;  -- 	STORE  AtanT
           0E6 : 08FA;  -- 	LOAD   AtanT
           0E7 : 6FFF;  -- 	ADDI   -1
           0E8 : 38EB;  -- 	JPOS   A2_DN        ; not done; continue shifting
           0E9 : 8126;  -- 	CALL   Div16s       ; do the standard division
           0EA : 8800;  -- 	RETURN
           0EB : 10FA;  -- 	STORE  AtanT
           0EC : 0957;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           0ED : 6001;  -- 	SHIFT  1
           0EE : 5957;  -- 	XOR    d16sN        ; if the sign changed,
           0EF : 30F3;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           0F0 : 5957;  -- 	XOR    d16sN        ; get back shifted version
           0F1 : 1157;  -- 	STORE  d16sN
           0F2 : 28E6;  -- 	JUMP   A2_DL
           0F3 : 0958;  -- 	LOAD   d16sD
           0F4 : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           0F5 : 1158;  -- 	STORE  d16sD
           0F6 : 28E6;  -- 	JUMP   A2_DL
           0F7 : 0000;  -- AtanX:      DW 0
           0F8 : 0000;  -- AtanY:      DW 0
           0F9 : 0000;  -- AtanRatio:  DW 0        ; =y/x
           0FA : 0000;  -- AtanT:      DW 0        ; temporary value
           0FB : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           0FC : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           0FD : B800;  -- 	LOADI  0
           0FE : 1122;  -- 	STORE  m16sc        ; clear carry
           0FF : 1125;  -- 	STORE  mres16sH     ; clear result
           100 : B810;  -- 	LOADI  16           ; load 16 to counter
           101 : 1123;  -- 	STORE  mcnt16s      
           102 : 0922;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           103 : 4107;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           104 : 0925;  -- 	LOAD   mres16sH     ; if a carry, 
           105 : 1920;  -- 	ADD    m16sA        ;  add multiplicand to result H
           106 : 1125;  -- 	STORE  mres16sH
           107 : 0921;  -- 	LOAD   m16sB
           108 : 49CB;  -- 	AND    One          ; check bit 0 of multiplier
           109 : 1122;  -- 	STORE  m16sc        ; save as next carry
           10A : 410E;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           10B : 0925;  -- 	LOAD   mres16sH     ; if bit 0 set,
           10C : 2120;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           10D : 1125;  -- 	STORE  mres16sH
           10E : 0921;  -- 	LOAD   m16sB
           10F : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           110 : 491F;  -- 	AND    c7FFF        ; clear msb
           111 : 1121;  -- 	STORE  m16sB
           112 : 0925;  -- 	LOAD   mres16sH     ; load result H
           113 : 600F;  -- 	SHIFT  15           ; move lsb to msb
           114 : 5121;  -- 	OR     m16sB
           115 : 1121;  -- 	STORE  m16sB        ; result L now includes carry out from H
           116 : 0925;  -- 	LOAD   mres16sH
           117 : 6011;  -- 	SHIFT  -1
           118 : 1125;  -- 	STORE  mres16sH     ; shift result H >>1
           119 : 0923;  -- 	LOAD   mcnt16s
           11A : 6FFF;  -- 	ADDI   -1           ; check counter
           11B : 3901;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           11C : 0921;  -- 	LOAD   m16sB
           11D : 1124;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           11E : 8800;  -- 	RETURN              ; Done
           11F : 7FFF;  -- c7FFF: DW &H7FFF
           120 : 0000;  -- m16sA: DW 0 ; multiplicand
           121 : 0000;  -- m16sB: DW 0 ; multipler
           122 : 0000;  -- m16sc: DW 0 ; carry
           123 : 0000;  -- mcnt16s: DW 0 ; counter
           124 : 0000;  -- mres16sL: DW 0 ; result low
           125 : 0000;  -- mres16sH: DW 0 ; result high
           126 : B800;  -- 	LOADI  0
           127 : 115E;  -- 	STORE  dres16sR     ; clear remainder result
           128 : 115B;  -- 	STORE  d16sC1       ; clear carry
           129 : 0957;  -- 	LOAD   d16sN
           12A : 5958;  -- 	XOR    d16sD
           12B : 1159;  -- 	STORE  d16sS        ; sign determination = N XOR D
           12C : B811;  -- 	LOADI  17
           12D : 115A;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           12E : 0958;  -- 	LOAD   d16sD
           12F : 8094;  -- 	CALL   Abs          ; take absolute value of denominator
           130 : 1158;  -- 	STORE  d16sD
           131 : 0957;  -- 	LOAD   d16sN
           132 : 8094;  -- 	CALL   Abs          ; take absolute value of numerator
           133 : 1157;  -- 	STORE  d16sN
           134 : 0957;  -- 	LOAD   d16sN
           135 : 601F;  -- 	SHIFT  -15          ; get msb
           136 : 49CB;  -- 	AND    One          ; only msb (because shift is arithmetic)
           137 : 115C;  -- 	STORE  d16sC2       ; store as carry
           138 : 0957;  -- 	LOAD   d16sN
           139 : 6001;  -- 	SHIFT  1            ; shift <<1
           13A : 515B;  -- 	OR     d16sC1       ; with carry
           13B : 1157;  -- 	STORE  d16sN
           13C : 095A;  -- 	LOAD   d16sT
           13D : 6FFF;  -- 	ADDI   -1           ; decrement counter
           13E : 414E;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           13F : 115A;  -- 	STORE  d16sT
           140 : 095E;  -- 	LOAD   dres16sR
           141 : 6001;  -- 	SHIFT  1            ; shift remainder
           142 : 515C;  -- 	OR     d16sC2       ; with carry from other shift
           143 : 2158;  -- 	SUB    d16sD        ; subtract denominator from remainder
           144 : 3149;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           145 : 115E;  -- 	STORE  dres16sR
           146 : B801;  -- 	LOADI  1
           147 : 115B;  -- 	STORE  d16sC1       ; set carry
           148 : 2934;  -- 	JUMP   Div16s_loop
           149 : 1958;  -- 	ADD    d16sD        ; add denominator back in
           14A : 115E;  -- 	STORE  dres16sR
           14B : B800;  -- 	LOADI  0
           14C : 115B;  -- 	STORE  d16sC1       ; clear carry
           14D : 2934;  -- 	JUMP   Div16s_loop
           14E : 0957;  -- 	LOAD   d16sN
           14F : 115D;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           150 : 0959;  -- 	LOAD   d16sS        ; check the sign indicator
           151 : 3153;  -- 	JNEG   Div16s_neg
           152 : 8800;  -- 	RETURN
           153 : 095D;  -- 	LOAD   dres16sQ     ; need to negate the result
           154 : 8095;  -- 	CALL   Neg
           155 : 115D;  -- 	STORE  dres16sQ
           156 : 8800;  -- 	RETURN	
           157 : 0000;  -- d16sN: DW 0 ; numerator
           158 : 0000;  -- d16sD: DW 0 ; denominator
           159 : 0000;  -- d16sS: DW 0 ; sign value
           15A : 0000;  -- d16sT: DW 0 ; temp counter
           15B : 0000;  -- d16sC1: DW 0 ; carry value
           15C : 0000;  -- d16sC2: DW 0 ; carry value
           15D : 0000;  -- dres16sQ: DW 0 ; quotient result
           15E : 0000;  -- dres16sR: DW 0 ; remainder result
           15F : 0989;  -- 	LOAD   L2X
           160 : 8094;  -- 	CALL   Abs
           161 : 118B;  -- 	STORE  L2T1
           162 : 098A;  -- 	LOAD   L2Y
           163 : 8094;  -- 	CALL   Abs
           164 : 218B;  -- 	SUB    L2T1
           165 : 3181;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           166 : 198B;  -- 	ADD    L2T1
           167 : 1120;  -- 	STORE  m16sa
           168 : B8F6;  -- 	LOADI  246       ; max * 246
           169 : 1121;  -- 	STORE  m16sB
           16A : 80FD;  -- 	CALL   Mult16s
           16B : 0925;  -- 	LOAD   mres16sH
           16C : 6008;  -- 	SHIFT  8
           16D : 118C;  -- 	STORE  L2T2
           16E : 0924;  -- 	LOAD   mres16sL
           16F : 6018;  -- 	SHIFT  -8        ; / 256
           170 : 49DD;  -- 	AND    LowByte
           171 : 518C;  -- 	OR     L2T2
           172 : 118D;  -- 	STORE  L2T3
           173 : 098B;  -- 	LOAD   L2T1
           174 : 1120;  -- 	STORE  m16sa
           175 : B868;  -- 	LOADI  104       ; min * 104
           176 : 1121;  -- 	STORE  m16sB
           177 : 80FD;  -- 	CALL   Mult16s
           178 : 0925;  -- 	LOAD   mres16sH
           179 : 6008;  -- 	SHIFT  8
           17A : 118C;  -- 	STORE  L2T2
           17B : 0924;  -- 	LOAD   mres16sL
           17C : 6018;  -- 	SHIFT  -8        ; / 256
           17D : 49DD;  -- 	AND    LowByte
           17E : 518C;  -- 	OR     L2T2
           17F : 198D;  -- 	ADD    L2T3     ; sum
           180 : 8800;  -- 	RETURN
           181 : 198B;  -- 	ADD    L2T1
           182 : 118C;  -- 	STORE  L2T2
           183 : 098B;  -- 	LOAD   L2T1
           184 : 118D;  -- 	STORE  L2T3
           185 : 098C;  -- 	LOAD   L2T2
           186 : 118B;  -- 	STORE  L2T1
           187 : 098D;  -- 	LOAD   L2T3
           188 : 2967;  -- 	JUMP   CalcDist
           189 : 0000;  -- L2X:  DW 0
           18A : 0000;  -- L2Y:  DW 0
           18B : 0000;  -- L2T1: DW 0
           18C : 0000;  -- L2T2: DW 0
           18D : 0000;  -- L2T3: DW 0
           18E : 9802;  -- 	OUT    TIMER
           18F : 9002;  -- 	IN     TIMER
           190 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           191 : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           192 : 318F;  -- 	JNEG   Wloop
           193 : 8800;  -- 	RETURN
           194 : 81AC;  -- 	CALL   GetBattLvl
           195 : 4194;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           196 : 21EE;  -- 	SUB    MinBatt
           197 : 319A;  -- 	JNEG   DeadBatt
           198 : 19EE;  -- 	ADD    MinBatt     ; get original value back
           199 : 8800;  -- 	RETURN
           19A : B820;  -- 	LOADI  &H20
           19B : 980A;  -- 	OUT    BEEP        ; start beep sound
           19C : 81AC;  -- 	CALL   GetBattLvl  ; get the battery level
           19D : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           19E : 9805;  -- 	OUT    SSEG2
           19F : 9806;  -- 	OUT    LCD
           1A0 : 09CA;  -- 	LOAD   Zero
           1A1 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           1A2 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           1A3 : 9807;  -- 	OUT    XLEDS
           1A4 : 818E;  -- 	CALL   Wait1       ; 1 second
           1A5 : B940;  -- 	LOADI  &H140       ; short, high-pitched beep
           1A6 : 980A;  -- 	OUT    BEEP        ; stop beeping
           1A7 : 09CA;  -- 	LOAD   Zero
           1A8 : 9801;  -- 	OUT    LEDS        ; LEDs off
           1A9 : 9807;  -- 	OUT    XLEDS
           1AA : 818E;  -- 	CALL   Wait1       ; 1 second
           1AB : 299A;  -- 	JUMP   DeadBatt    ; repeat forever
           1AC : 09F0;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           1AD : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           1AE : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           1AF : 81BA;  -- 	CALL   BlockI2C    ; wait for it to finish
           1B0 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           1B1 : 8800;  -- 	RETURN
           1B2 : 81BA;  -- 	CALL   BlockI2C    ; wait for idle
           1B3 : 09EF;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           1B4 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           1B5 : 09CA;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           1B6 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           1B7 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           1B8 : 81BA;  -- 	CALL   BlockI2C    ; wait for it to finish
           1B9 : 8800;  -- 	RETURN
           1BA : 09CA;  -- 	LOAD   Zero
           1BB : 11C8;  -- 	STORE  Temp        ; Used to check for timeout
           1BC : 09C8;  -- 	LOAD   Temp
           1BD : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           1BE : 11C8;  -- 	STORE  Temp
           1BF : 41C3;  -- 	JZERO  I2CError    ; Timeout occurred; error
           1C0 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           1C1 : 39BC;  -- 	JPOS   BI2CL       ; If not 0, try again
           1C2 : 8800;  -- 	RETURN             ; Else return
           1C3 : 09CA;  -- 	LOAD   Zero
           1C4 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           1C5 : 9804;  -- 	OUT    SSEG1
           1C6 : 9805;  -- 	OUT    SSEG2       ; display error message
           1C7 : 29C3;  -- 	JUMP   I2CError
           1C8 : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           1C9 : FFFF;  -- NegOne:   DW -1
           1CA : 0000;  -- Zero:     DW 0
           1CB : 0001;  -- One:      DW 1
           1CC : 0002;  -- Two:      DW 2
           1CD : 0003;  -- Three:    DW 3
           1CE : 0004;  -- Four:     DW 4
           1CF : 0005;  -- Five:     DW 5
           1D0 : 0006;  -- Six:      DW 6
           1D1 : 0007;  -- Seven:    DW 7
           1D2 : 0008;  -- Eight:    DW 8
           1D3 : 0009;  -- Nine:     DW 9
           1D4 : 000A;  -- Ten:      DW 10
           1D5 : 0001;  -- Mask0:    DW &B00000001
           1D6 : 0002;  -- Mask1:    DW &B00000010
           1D7 : 0004;  -- Mask2:    DW &B00000100
           1D8 : 0008;  -- Mask3:    DW &B00001000
           1D9 : 0010;  -- Mask4:    DW &B00010000
           1DA : 0020;  -- Mask5:    DW &B00100000
           1DB : 0040;  -- Mask6:    DW &B01000000
           1DC : 0080;  -- Mask7:    DW &B10000000
           1DD : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           1DE : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           1DF : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           1E0 : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           1E1 : 024A;  -- Ft2:      DW 586       ; ~2ft in 1.04mm units
           1E2 : 036F;  -- Ft3:      DW 879
           1E3 : 0494;  -- Ft4:      DW 1172
           1E4 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           1E5 : 00B4;  -- Deg180:   DW 180       ; 180
           1E6 : 010E;  -- Deg270:   DW 270       ; 270
           1E7 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           1E8 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           1E9 : FF9C;  -- RSlow:    DW -100
           1EA : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           1EB : FEA2;  -- RMid:     DW -350
           1EC : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           1ED : FE0C;  -- RFast:    DW -500
           1EE : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           1EF : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           1F0 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
  END;
